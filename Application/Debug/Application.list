
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  0800510c  0800510c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800765c  0800765c  0000365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  080076d8  080076d8  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d8  080076d8  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d8  080076d8  000036d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076dc  080076dc  000036dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080076e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000006c  0800774c  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800774c  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005230  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147d  00000000  00000000  000092c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177eb  00000000  00000000  0000b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007514  00000000  00000000  00022afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083969  00000000  00000000  0002a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  000ad9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000afb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	@ (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	2000006c 	.word	0x2000006c
 8005128:	00000000 	.word	0x00000000
 800512c:	08007644 	.word	0x08007644

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	@ (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000070 	.word	0x20000070
 8005148:	08007644 	.word	0x08007644

0800514c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005150:	f000 fa4c 	bl	80055ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005154:	f000 f81e 	bl	8005194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005158:	f000 f882 	bl	8005260 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800515c:	f000 f856 	bl	800520c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application v%d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8005160:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <main+0x3c>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <main+0x3c>)
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	461a      	mov	r2, r3
 800516c:	4807      	ldr	r0, [pc, #28]	@ (800518c <main+0x40>)
 800516e:	f001 fbf1 	bl	8006954 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005176:	4806      	ldr	r0, [pc, #24]	@ (8005190 <main+0x44>)
 8005178:	f000 fd3e 	bl	8005bf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);							//1sec delay
 800517c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005180:	f000 fa96 	bl	80056b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005184:	bf00      	nop
 8005186:	e7f4      	b.n	8005172 <main+0x26>
 8005188:	20000000 	.word	0x20000000
 800518c:	0800765c 	.word	0x0800765c
 8005190:	40011000 	.word	0x40011000

08005194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b090      	sub	sp, #64	@ 0x40
 8005198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800519a:	f107 0318 	add.w	r3, r7, #24
 800519e:	2228      	movs	r2, #40	@ 0x28
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fc2b 	bl	80069fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	609a      	str	r2, [r3, #8]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051b6:	2302      	movs	r3, #2
 80051b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051ba:	2301      	movs	r3, #1
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051be:	2310      	movs	r3, #16
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fd2e 	bl	8005c2c <HAL_RCC_OscConfig>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80051d6:	f000 f895 	bl	8005304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051da:	230f      	movs	r3, #15
 80051dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 ff9c 	bl	8006130 <HAL_RCC_ClockConfig>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80051fe:	f000 f881 	bl	8005304 <Error_Handler>
  }
}
 8005202:	bf00      	nop
 8005204:	3740      	adds	r7, #64	@ 0x40
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005210:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005212:	4a12      	ldr	r2, [pc, #72]	@ (800525c <MX_USART1_UART_Init+0x50>)
 8005214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005216:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800521c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800521e:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005224:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005226:	2200      	movs	r2, #0
 8005228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 800522c:	2200      	movs	r2, #0
 800522e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005230:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005232:	220c      	movs	r2, #12
 8005234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005236:	4b08      	ldr	r3, [pc, #32]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 800523e:	2200      	movs	r2, #0
 8005240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005242:	4805      	ldr	r0, [pc, #20]	@ (8005258 <MX_USART1_UART_Init+0x4c>)
 8005244:	f001 f90c 	bl	8006460 <HAL_UART_Init>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800524e:	f000 f859 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000088 	.word	0x20000088
 800525c:	40013800 	.word	0x40013800

08005260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	609a      	str	r2, [r3, #8]
 8005272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005274:	4b18      	ldr	r3, [pc, #96]	@ (80052d8 <MX_GPIO_Init+0x78>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <MX_GPIO_Init+0x78>)
 800527a:	f043 0310 	orr.w	r3, r3, #16
 800527e:	6193      	str	r3, [r2, #24]
 8005280:	4b15      	ldr	r3, [pc, #84]	@ (80052d8 <MX_GPIO_Init+0x78>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <MX_GPIO_Init+0x78>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	4a11      	ldr	r2, [pc, #68]	@ (80052d8 <MX_GPIO_Init+0x78>)
 8005292:	f043 0304 	orr.w	r3, r3, #4
 8005296:	6193      	str	r3, [r2, #24]
 8005298:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <MX_GPIO_Init+0x78>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052aa:	480c      	ldr	r0, [pc, #48]	@ (80052dc <MX_GPIO_Init+0x7c>)
 80052ac:	f000 fc8c 	bl	8005bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052b6:	2301      	movs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052be:	2302      	movs	r3, #2
 80052c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	4804      	ldr	r0, [pc, #16]	@ (80052dc <MX_GPIO_Init+0x7c>)
 80052ca:	f000 faf9 	bl	80058c0 <HAL_GPIO_Init>

}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40011000 	.word	0x40011000

080052e0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80052e8:	1d39      	adds	r1, r7, #4
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	2201      	movs	r2, #1
 80052f0:	4803      	ldr	r0, [pc, #12]	@ (8005300 <__io_putchar+0x20>)
 80052f2:	f001 f902 	bl	80064fa <HAL_UART_Transmit>

  return ch;
 80052f6:	687b      	ldr	r3, [r7, #4]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000088 	.word	0x20000088

08005304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005308:	b672      	cpsid	i
}
 800530a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <Error_Handler+0x8>

08005310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005316:	4b0e      	ldr	r3, [pc, #56]	@ (8005350 <HAL_MspInit+0x40>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <HAL_MspInit+0x40>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6193      	str	r3, [r2, #24]
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_MspInit+0x40>)
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <HAL_MspInit+0x40>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a07      	ldr	r2, [pc, #28]	@ (8005350 <HAL_MspInit+0x40>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]
 800533a:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <HAL_MspInit+0x40>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535c:	f107 0310 	add.w	r3, r7, #16
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <HAL_UART_MspInit+0x8c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d131      	bne.n	80053d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005374:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a1a      	ldr	r2, [pc, #104]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 800537a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b18      	ldr	r3, [pc, #96]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538c:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6193      	str	r3, [r2, #24]
 8005398:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <HAL_UART_MspInit+0x90>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053aa:	2302      	movs	r3, #2
 80053ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053ae:	2303      	movs	r3, #3
 80053b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b2:	f107 0310 	add.w	r3, r7, #16
 80053b6:	4619      	mov	r1, r3
 80053b8:	480b      	ldr	r0, [pc, #44]	@ (80053e8 <HAL_UART_MspInit+0x94>)
 80053ba:	f000 fa81 	bl	80058c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	4619      	mov	r1, r3
 80053d2:	4805      	ldr	r0, [pc, #20]	@ (80053e8 <HAL_UART_MspInit+0x94>)
 80053d4:	f000 fa74 	bl	80058c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40010800 	.word	0x40010800

080053ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <NMI_Handler+0x4>

080053f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <HardFault_Handler+0x4>

080053fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <MemManage_Handler+0x4>

08005404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <BusFault_Handler+0x4>

0800540c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <UsageFault_Handler+0x4>

08005414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800543c:	f000 f91c 	bl	8005678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005440:	bf00      	nop
 8005442:	bd80      	pop	{r7, pc}

08005444 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e00a      	b.n	800546c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005456:	f3af 8000 	nop.w
 800545a:	4601      	mov	r1, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	60ba      	str	r2, [r7, #8]
 8005462:	b2ca      	uxtb	r2, r1
 8005464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3301      	adds	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	dbf0      	blt.n	8005456 <_read+0x12>
	}

return len;
 8005474:	687b      	ldr	r3, [r7, #4]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e009      	b.n	80054a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	60ba      	str	r2, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff21 	bl	80052e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	dbf1      	blt.n	8005490 <_write+0x12>
	}
	return len;
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <_close>:

int _close(int file)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
	return -1;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054dc:	605a      	str	r2, [r3, #4]
	return 0;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <_isatty>:

int _isatty(int file)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
	return 1;
 80054f2:	2301      	movs	r3, #1
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
	return 0;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
	...

08005518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005520:	4a14      	ldr	r2, [pc, #80]	@ (8005574 <_sbrk+0x5c>)
 8005522:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <_sbrk+0x60>)
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800552c:	4b13      	ldr	r3, [pc, #76]	@ (800557c <_sbrk+0x64>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005534:	4b11      	ldr	r3, [pc, #68]	@ (800557c <_sbrk+0x64>)
 8005536:	4a12      	ldr	r2, [pc, #72]	@ (8005580 <_sbrk+0x68>)
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800553a:	4b10      	ldr	r3, [pc, #64]	@ (800557c <_sbrk+0x64>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d207      	bcs.n	8005558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005548:	f001 faa8 	bl	8006a9c <__errno>
 800554c:	4603      	mov	r3, r0
 800554e:	220c      	movs	r2, #12
 8005550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005552:	f04f 33ff 	mov.w	r3, #4294967295
 8005556:	e009      	b.n	800556c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005558:	4b08      	ldr	r3, [pc, #32]	@ (800557c <_sbrk+0x64>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800555e:	4b07      	ldr	r3, [pc, #28]	@ (800557c <_sbrk+0x64>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	4a05      	ldr	r2, [pc, #20]	@ (800557c <_sbrk+0x64>)
 8005568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800556a:	68fb      	ldr	r3, [r7, #12]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20005000 	.word	0x20005000
 8005578:	00000400 	.word	0x00000400
 800557c:	200000cc 	.word	0x200000cc
 8005580:	20000220 	.word	0x20000220

08005584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005588:	4b03      	ldr	r3, [pc, #12]	@ (8005598 <SystemInit+0x14>)
 800558a:	4a04      	ldr	r2, [pc, #16]	@ (800559c <SystemInit+0x18>)
 800558c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000ed00 	.word	0xe000ed00
 800559c:	08005000 	.word	0x08005000

080055a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055a0:	480c      	ldr	r0, [pc, #48]	@ (80055d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055a2:	490d      	ldr	r1, [pc, #52]	@ (80055d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055a4:	4a0d      	ldr	r2, [pc, #52]	@ (80055dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055a8:	e002      	b.n	80055b0 <LoopCopyDataInit>

080055aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ae:	3304      	adds	r3, #4

080055b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b4:	d3f9      	bcc.n	80055aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055b6:	4a0a      	ldr	r2, [pc, #40]	@ (80055e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055b8:	4c0a      	ldr	r4, [pc, #40]	@ (80055e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80055ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055bc:	e001      	b.n	80055c2 <LoopFillZerobss>

080055be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c0:	3204      	adds	r2, #4

080055c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c4:	d3fb      	bcc.n	80055be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055c6:	f7ff ffdd 	bl	8005584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ca:	f001 fa6d 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055ce:	f7ff fdbd 	bl	800514c <main>
  bx lr
 80055d2:	4770      	bx	lr
  ldr r0, =_sdata
 80055d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80055dc:	080076e0 	.word	0x080076e0
  ldr r2, =_sbss
 80055e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80055e4:	20000220 	.word	0x20000220

080055e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055e8:	e7fe      	b.n	80055e8 <ADC1_2_IRQHandler>
	...

080055ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055f0:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <HAL_Init+0x28>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a07      	ldr	r2, [pc, #28]	@ (8005614 <HAL_Init+0x28>)
 80055f6:	f043 0310 	orr.w	r3, r3, #16
 80055fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055fc:	2003      	movs	r0, #3
 80055fe:	f000 f92b 	bl	8005858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005602:	200f      	movs	r0, #15
 8005604:	f000 f808 	bl	8005618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005608:	f7ff fe82 	bl	8005310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40022000 	.word	0x40022000

08005618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005620:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_InitTick+0x54>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <HAL_InitTick+0x58>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800562e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f935 	bl	80058a6 <HAL_SYSTICK_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e00e      	b.n	8005664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d80a      	bhi.n	8005662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800564c:	2200      	movs	r2, #0
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	f000 f90b 	bl	800586e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005658:	4a06      	ldr	r2, [pc, #24]	@ (8005674 <HAL_InitTick+0x5c>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e000      	b.n	8005664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000004 	.word	0x20000004
 8005670:	2000000c 	.word	0x2000000c
 8005674:	20000008 	.word	0x20000008

08005678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_IncTick+0x1c>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_IncTick+0x20>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4413      	add	r3, r2
 8005688:	4a03      	ldr	r2, [pc, #12]	@ (8005698 <HAL_IncTick+0x20>)
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	2000000c 	.word	0x2000000c
 8005698:	200000d0 	.word	0x200000d0

0800569c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return uwTick;
 80056a0:	4b02      	ldr	r3, [pc, #8]	@ (80056ac <HAL_GetTick+0x10>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	200000d0 	.word	0x200000d0

080056b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056b8:	f7ff fff0 	bl	800569c <HAL_GetTick>
 80056bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d005      	beq.n	80056d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ca:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <HAL_Delay+0x44>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056d6:	bf00      	nop
 80056d8:	f7ff ffe0 	bl	800569c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d8f7      	bhi.n	80056d8 <HAL_Delay+0x28>
  {
  }
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005708:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <__NVIC_SetPriorityGrouping+0x44>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005714:	4013      	ands	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800572a:	4a04      	ldr	r2, [pc, #16]	@ (800573c <__NVIC_SetPriorityGrouping+0x44>)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	60d3      	str	r3, [r2, #12]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <__NVIC_GetPriorityGrouping+0x18>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	f003 0307 	and.w	r3, r3, #7
}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db0a      	blt.n	8005786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	490c      	ldr	r1, [pc, #48]	@ (80057a8 <__NVIC_SetPriority+0x4c>)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	0112      	lsls	r2, r2, #4
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	440b      	add	r3, r1
 8005780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005784:	e00a      	b.n	800579c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4908      	ldr	r1, [pc, #32]	@ (80057ac <__NVIC_SetPriority+0x50>)
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	3b04      	subs	r3, #4
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	440b      	add	r3, r1
 800579a:	761a      	strb	r2, [r3, #24]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e100 	.word	0xe000e100
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	@ 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f1c3 0307 	rsb	r3, r3, #7
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf28      	it	cs
 80057ce:	2304      	movcs	r3, #4
 80057d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3304      	adds	r3, #4
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d902      	bls.n	80057e0 <NVIC_EncodePriority+0x30>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3b03      	subs	r3, #3
 80057de:	e000      	b.n	80057e2 <NVIC_EncodePriority+0x32>
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43da      	mvns	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	401a      	ands	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f8:	f04f 31ff 	mov.w	r1, #4294967295
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	43d9      	mvns	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005808:	4313      	orrs	r3, r2
         );
}
 800580a:	4618      	mov	r0, r3
 800580c:	3724      	adds	r7, #36	@ 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005824:	d301      	bcc.n	800582a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005826:	2301      	movs	r3, #1
 8005828:	e00f      	b.n	800584a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800582a:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <SysTick_Config+0x40>)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3b01      	subs	r3, #1
 8005830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005832:	210f      	movs	r1, #15
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	f7ff ff90 	bl	800575c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800583c:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <SysTick_Config+0x40>)
 800583e:	2200      	movs	r2, #0
 8005840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005842:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <SysTick_Config+0x40>)
 8005844:	2207      	movs	r2, #7
 8005846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	e000e010 	.word	0xe000e010

08005858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff49 	bl	80056f8 <__NVIC_SetPriorityGrouping>
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	4603      	mov	r3, r0
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005880:	f7ff ff5e 	bl	8005740 <__NVIC_GetPriorityGrouping>
 8005884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7ff ff90 	bl	80057b0 <NVIC_EncodePriority>
 8005890:	4602      	mov	r2, r0
 8005892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ff5f 	bl	800575c <__NVIC_SetPriority>
}
 800589e:	bf00      	nop
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ffb0 	bl	8005814 <SysTick_Config>
 80058b4:	4603      	mov	r3, r0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b08b      	sub	sp, #44	@ 0x2c
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80058ce:	2300      	movs	r3, #0
 80058d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058d2:	e169      	b.n	8005ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80058d4:	2201      	movs	r2, #1
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f040 8158 	bne.w	8005ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a9a      	ldr	r2, [pc, #616]	@ (8005b60 <HAL_GPIO_Init+0x2a0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d05e      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
 80058fc:	4a98      	ldr	r2, [pc, #608]	@ (8005b60 <HAL_GPIO_Init+0x2a0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d875      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 8005902:	4a98      	ldr	r2, [pc, #608]	@ (8005b64 <HAL_GPIO_Init+0x2a4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d058      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
 8005908:	4a96      	ldr	r2, [pc, #600]	@ (8005b64 <HAL_GPIO_Init+0x2a4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d86f      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 800590e:	4a96      	ldr	r2, [pc, #600]	@ (8005b68 <HAL_GPIO_Init+0x2a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d052      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
 8005914:	4a94      	ldr	r2, [pc, #592]	@ (8005b68 <HAL_GPIO_Init+0x2a8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d869      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 800591a:	4a94      	ldr	r2, [pc, #592]	@ (8005b6c <HAL_GPIO_Init+0x2ac>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d04c      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
 8005920:	4a92      	ldr	r2, [pc, #584]	@ (8005b6c <HAL_GPIO_Init+0x2ac>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d863      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 8005926:	4a92      	ldr	r2, [pc, #584]	@ (8005b70 <HAL_GPIO_Init+0x2b0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d046      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
 800592c:	4a90      	ldr	r2, [pc, #576]	@ (8005b70 <HAL_GPIO_Init+0x2b0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d85d      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 8005932:	2b12      	cmp	r3, #18
 8005934:	d82a      	bhi.n	800598c <HAL_GPIO_Init+0xcc>
 8005936:	2b12      	cmp	r3, #18
 8005938:	d859      	bhi.n	80059ee <HAL_GPIO_Init+0x12e>
 800593a:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <HAL_GPIO_Init+0x80>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	080059bb 	.word	0x080059bb
 8005944:	08005995 	.word	0x08005995
 8005948:	080059a7 	.word	0x080059a7
 800594c:	080059e9 	.word	0x080059e9
 8005950:	080059ef 	.word	0x080059ef
 8005954:	080059ef 	.word	0x080059ef
 8005958:	080059ef 	.word	0x080059ef
 800595c:	080059ef 	.word	0x080059ef
 8005960:	080059ef 	.word	0x080059ef
 8005964:	080059ef 	.word	0x080059ef
 8005968:	080059ef 	.word	0x080059ef
 800596c:	080059ef 	.word	0x080059ef
 8005970:	080059ef 	.word	0x080059ef
 8005974:	080059ef 	.word	0x080059ef
 8005978:	080059ef 	.word	0x080059ef
 800597c:	080059ef 	.word	0x080059ef
 8005980:	080059ef 	.word	0x080059ef
 8005984:	0800599d 	.word	0x0800599d
 8005988:	080059b1 	.word	0x080059b1
 800598c:	4a79      	ldr	r2, [pc, #484]	@ (8005b74 <HAL_GPIO_Init+0x2b4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005992:	e02c      	b.n	80059ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	623b      	str	r3, [r7, #32]
          break;
 800599a:	e029      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	3304      	adds	r3, #4
 80059a2:	623b      	str	r3, [r7, #32]
          break;
 80059a4:	e024      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	3308      	adds	r3, #8
 80059ac:	623b      	str	r3, [r7, #32]
          break;
 80059ae:	e01f      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	330c      	adds	r3, #12
 80059b6:	623b      	str	r3, [r7, #32]
          break;
 80059b8:	e01a      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80059c2:	2304      	movs	r3, #4
 80059c4:	623b      	str	r3, [r7, #32]
          break;
 80059c6:	e013      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d105      	bne.n	80059dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059d0:	2308      	movs	r3, #8
 80059d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	611a      	str	r2, [r3, #16]
          break;
 80059da:	e009      	b.n	80059f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059dc:	2308      	movs	r3, #8
 80059de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	615a      	str	r2, [r3, #20]
          break;
 80059e6:	e003      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80059e8:	2300      	movs	r3, #0
 80059ea:	623b      	str	r3, [r7, #32]
          break;
 80059ec:	e000      	b.n	80059f0 <HAL_GPIO_Init+0x130>
          break;
 80059ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2bff      	cmp	r3, #255	@ 0xff
 80059f4:	d801      	bhi.n	80059fa <HAL_GPIO_Init+0x13a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	e001      	b.n	80059fe <HAL_GPIO_Init+0x13e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2bff      	cmp	r3, #255	@ 0xff
 8005a04:	d802      	bhi.n	8005a0c <HAL_GPIO_Init+0x14c>
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	e002      	b.n	8005a12 <HAL_GPIO_Init+0x152>
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	3b08      	subs	r3, #8
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	210f      	movs	r1, #15
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80b1 	beq.w	8005ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a40:	4b4d      	ldr	r3, [pc, #308]	@ (8005b78 <HAL_GPIO_Init+0x2b8>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4a4c      	ldr	r2, [pc, #304]	@ (8005b78 <HAL_GPIO_Init+0x2b8>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6193      	str	r3, [r2, #24]
 8005a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b78 <HAL_GPIO_Init+0x2b8>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005a58:	4a48      	ldr	r2, [pc, #288]	@ (8005b7c <HAL_GPIO_Init+0x2bc>)
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	220f      	movs	r2, #15
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a40      	ldr	r2, [pc, #256]	@ (8005b80 <HAL_GPIO_Init+0x2c0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <HAL_GPIO_Init+0x1ec>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3f      	ldr	r2, [pc, #252]	@ (8005b84 <HAL_GPIO_Init+0x2c4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00d      	beq.n	8005aa8 <HAL_GPIO_Init+0x1e8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b88 <HAL_GPIO_Init+0x2c8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <HAL_GPIO_Init+0x1e4>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	@ (8005b8c <HAL_GPIO_Init+0x2cc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d101      	bne.n	8005aa0 <HAL_GPIO_Init+0x1e0>
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <HAL_GPIO_Init+0x1ee>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e004      	b.n	8005aae <HAL_GPIO_Init+0x1ee>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e002      	b.n	8005aae <HAL_GPIO_Init+0x1ee>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_GPIO_Init+0x1ee>
 8005aac:	2300      	movs	r3, #0
 8005aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab0:	f002 0203 	and.w	r2, r2, #3
 8005ab4:	0092      	lsls	r2, r2, #2
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005abe:	492f      	ldr	r1, [pc, #188]	@ (8005b7c <HAL_GPIO_Init+0x2bc>)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d006      	beq.n	8005ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	492c      	ldr	r1, [pc, #176]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	600b      	str	r3, [r1, #0]
 8005ae4:	e006      	b.n	8005af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	4928      	ldr	r1, [pc, #160]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d006      	beq.n	8005b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b00:	4b23      	ldr	r3, [pc, #140]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4922      	ldr	r1, [pc, #136]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]
 8005b0c:	e006      	b.n	8005b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b0e:	4b20      	ldr	r3, [pc, #128]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	491e      	ldr	r1, [pc, #120]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005b28:	4b19      	ldr	r3, [pc, #100]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4918      	ldr	r1, [pc, #96]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	608b      	str	r3, [r1, #8]
 8005b34:	e006      	b.n	8005b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005b36:	4b16      	ldr	r3, [pc, #88]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	4914      	ldr	r1, [pc, #80]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d021      	beq.n	8005b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005b50:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	490e      	ldr	r1, [pc, #56]	@ (8005b90 <HAL_GPIO_Init+0x2d0>)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60cb      	str	r3, [r1, #12]
 8005b5c:	e021      	b.n	8005ba2 <HAL_GPIO_Init+0x2e2>
 8005b5e:	bf00      	nop
 8005b60:	10320000 	.word	0x10320000
 8005b64:	10310000 	.word	0x10310000
 8005b68:	10220000 	.word	0x10220000
 8005b6c:	10210000 	.word	0x10210000
 8005b70:	10120000 	.word	0x10120000
 8005b74:	10110000 	.word	0x10110000
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40010800 	.word	0x40010800
 8005b84:	40010c00 	.word	0x40010c00
 8005b88:	40011000 	.word	0x40011000
 8005b8c:	40011400 	.word	0x40011400
 8005b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005b94:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <HAL_GPIO_Init+0x304>)
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	4909      	ldr	r1, [pc, #36]	@ (8005bc4 <HAL_GPIO_Init+0x304>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f ae8e 	bne.w	80058d4 <HAL_GPIO_Init+0x14>
  }
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	372c      	adds	r7, #44	@ 0x2c
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bd8:	787b      	ldrb	r3, [r7, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005be4:	e003      	b.n	8005bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	041a      	lsls	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	611a      	str	r2, [r3, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c0a:	887a      	ldrh	r2, [r7, #2]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	041a      	lsls	r2, r3, #16
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	43d9      	mvns	r1, r3
 8005c16:	887b      	ldrh	r3, [r7, #2]
 8005c18:	400b      	ands	r3, r1
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	611a      	str	r2, [r3, #16]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e272      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8087 	beq.w	8005d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c4c:	4b92      	ldr	r3, [pc, #584]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d00c      	beq.n	8005c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c58:	4b8f      	ldr	r3, [pc, #572]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d112      	bne.n	8005c8a <HAL_RCC_OscConfig+0x5e>
 8005c64:	4b8c      	ldr	r3, [pc, #560]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c72:	4b89      	ldr	r3, [pc, #548]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d06c      	beq.n	8005d58 <HAL_RCC_OscConfig+0x12c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d168      	bne.n	8005d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e24c      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c92:	d106      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x76>
 8005c94:	4b80      	ldr	r3, [pc, #512]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7f      	ldr	r2, [pc, #508]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e02e      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x98>
 8005caa:	4b7b      	ldr	r3, [pc, #492]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a7a      	ldr	r2, [pc, #488]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b78      	ldr	r3, [pc, #480]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a77      	ldr	r2, [pc, #476]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e01d      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xbc>
 8005cce:	4b72      	ldr	r3, [pc, #456]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a71      	ldr	r2, [pc, #452]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b6f      	ldr	r3, [pc, #444]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6e      	ldr	r2, [pc, #440]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0xd4>
 8005ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6a      	ldr	r2, [pc, #424]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4b68      	ldr	r3, [pc, #416]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a67      	ldr	r2, [pc, #412]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7ff fcc8 	bl	800569c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d10:	f7ff fcc4 	bl	800569c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	@ 0x64
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e200      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	4b5d      	ldr	r3, [pc, #372]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe4>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7ff fcb4 	bl	800569c <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7ff fcb0 	bl	800569c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	@ 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1ec      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	4b53      	ldr	r3, [pc, #332]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x10c>
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d063      	beq.n	8005e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d66:	4b4c      	ldr	r3, [pc, #304]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d72:	4b49      	ldr	r3, [pc, #292]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x18c>
 8005d7e:	4b46      	ldr	r3, [pc, #280]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d116      	bne.n	8005db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	4b43      	ldr	r3, [pc, #268]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_RCC_OscConfig+0x176>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e1c0      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da2:	4b3d      	ldr	r3, [pc, #244]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4939      	ldr	r1, [pc, #228]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db6:	e03a      	b.n	8005e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc0:	4b36      	ldr	r3, [pc, #216]	@ (8005e9c <HAL_RCC_OscConfig+0x270>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc6:	f7ff fc69 	bl	800569c <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dce:	f7ff fc65 	bl	800569c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e1a1      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dec:	4b2a      	ldr	r3, [pc, #168]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4927      	ldr	r1, [pc, #156]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]
 8005e00:	e015      	b.n	8005e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <HAL_RCC_OscConfig+0x270>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7ff fc48 	bl	800569c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7ff fc44 	bl	800569c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e180      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	4b1d      	ldr	r3, [pc, #116]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d03a      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d019      	beq.n	8005e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <HAL_RCC_OscConfig+0x274>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e48:	f7ff fc28 	bl	800569c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e50:	f7ff fc24 	bl	800569c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e160      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f000 fad8 	bl	8006424 <RCC_Delay>
 8005e74:	e01c      	b.n	8005eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <HAL_RCC_OscConfig+0x274>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e7c:	f7ff fc0e 	bl	800569c <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e82:	e00f      	b.n	8005ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e84:	f7ff fc0a 	bl	800569c <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d908      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e146      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	42420000 	.word	0x42420000
 8005ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	4b92      	ldr	r3, [pc, #584]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e9      	bne.n	8005e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80a6 	beq.w	800600a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10d      	bne.n	8005eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ece:	4b88      	ldr	r3, [pc, #544]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	4a87      	ldr	r2, [pc, #540]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed8:	61d3      	str	r3, [r2, #28]
 8005eda:	4b85      	ldr	r3, [pc, #532]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eea:	4b82      	ldr	r3, [pc, #520]	@ (80060f4 <HAL_RCC_OscConfig+0x4c8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d118      	bne.n	8005f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80060f4 <HAL_RCC_OscConfig+0x4c8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a7e      	ldr	r2, [pc, #504]	@ (80060f4 <HAL_RCC_OscConfig+0x4c8>)
 8005efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f02:	f7ff fbcb 	bl	800569c <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0a:	f7ff fbc7 	bl	800569c <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b64      	cmp	r3, #100	@ 0x64
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e103      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1c:	4b75      	ldr	r3, [pc, #468]	@ (80060f4 <HAL_RCC_OscConfig+0x4c8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x312>
 8005f30:	4b6f      	ldr	r3, [pc, #444]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	4a6e      	ldr	r2, [pc, #440]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6213      	str	r3, [r2, #32]
 8005f3c:	e02d      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x334>
 8005f46:	4b6a      	ldr	r3, [pc, #424]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4a69      	ldr	r2, [pc, #420]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6213      	str	r3, [r2, #32]
 8005f52:	4b67      	ldr	r3, [pc, #412]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4a66      	ldr	r2, [pc, #408]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	f023 0304 	bic.w	r3, r3, #4
 8005f5c:	6213      	str	r3, [r2, #32]
 8005f5e:	e01c      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d10c      	bne.n	8005f82 <HAL_RCC_OscConfig+0x356>
 8005f68:	4b61      	ldr	r3, [pc, #388]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	4a60      	ldr	r2, [pc, #384]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f6e:	f043 0304 	orr.w	r3, r3, #4
 8005f72:	6213      	str	r3, [r2, #32]
 8005f74:	4b5e      	ldr	r3, [pc, #376]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	4a5d      	ldr	r2, [pc, #372]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6213      	str	r3, [r2, #32]
 8005f80:	e00b      	b.n	8005f9a <HAL_RCC_OscConfig+0x36e>
 8005f82:	4b5b      	ldr	r3, [pc, #364]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4a5a      	ldr	r2, [pc, #360]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	6213      	str	r3, [r2, #32]
 8005f8e:	4b58      	ldr	r3, [pc, #352]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	4a57      	ldr	r2, [pc, #348]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005f94:	f023 0304 	bic.w	r3, r3, #4
 8005f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d015      	beq.n	8005fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa2:	f7ff fb7b 	bl	800569c <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7ff fb77 	bl	800569c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e0b1      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ee      	beq.n	8005faa <HAL_RCC_OscConfig+0x37e>
 8005fcc:	e014      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fce:	f7ff fb65 	bl	800569c <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd4:	e00a      	b.n	8005fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd6:	f7ff fb61 	bl	800569c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e09b      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fec:	4b40      	ldr	r3, [pc, #256]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1ee      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4a3b      	ldr	r2, [pc, #236]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8087 	beq.w	8006122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006014:	4b36      	ldr	r3, [pc, #216]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b08      	cmp	r3, #8
 800601e:	d061      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d146      	bne.n	80060b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006028:	4b33      	ldr	r3, [pc, #204]	@ (80060f8 <HAL_RCC_OscConfig+0x4cc>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602e:	f7ff fb35 	bl	800569c <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006036:	f7ff fb31 	bl	800569c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e06d      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006048:	4b29      	ldr	r3, [pc, #164]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605c:	d108      	bne.n	8006070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800605e:	4b24      	ldr	r3, [pc, #144]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4921      	ldr	r1, [pc, #132]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006070:	4b1f      	ldr	r3, [pc, #124]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a19      	ldr	r1, [r3, #32]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	430b      	orrs	r3, r1
 8006082:	491b      	ldr	r1, [pc, #108]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006088:	4b1b      	ldr	r3, [pc, #108]	@ (80060f8 <HAL_RCC_OscConfig+0x4cc>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7ff fb05 	bl	800569c <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006096:	f7ff fb01 	bl	800569c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e03d      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x46a>
 80060b4:	e035      	b.n	8006122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <HAL_RCC_OscConfig+0x4cc>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7ff faee 	bl	800569c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7ff faea 	bl	800569c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e026      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d6:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <HAL_RCC_OscConfig+0x4c4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x498>
 80060e2:	e01e      	b.n	8006122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e019      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40007000 	.word	0x40007000
 80060f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060fc:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <HAL_RCC_OscConfig+0x500>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	429a      	cmp	r2, r3
 800610e:	d106      	bne.n	800611e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d001      	beq.n	8006122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000

08006130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0d0      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006144:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d910      	bls.n	8006174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b67      	ldr	r3, [pc, #412]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 0207 	bic.w	r2, r3, #7
 800615a:	4965      	ldr	r1, [pc, #404]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b63      	ldr	r3, [pc, #396]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0b8      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800618c:	4b59      	ldr	r3, [pc, #356]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a58      	ldr	r2, [pc, #352]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a4:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a52      	ldr	r2, [pc, #328]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80061ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b0:	4b50      	ldr	r3, [pc, #320]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	494d      	ldr	r1, [pc, #308]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d040      	beq.n	8006250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	4b47      	ldr	r3, [pc, #284]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d115      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e07f      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	4b41      	ldr	r3, [pc, #260]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e073      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fe:	4b3d      	ldr	r3, [pc, #244]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e06b      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620e:	4b39      	ldr	r3, [pc, #228]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f023 0203 	bic.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4936      	ldr	r1, [pc, #216]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006220:	f7ff fa3c 	bl	800569c <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	e00a      	b.n	800623e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006228:	f7ff fa38 	bl	800569c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e053      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623e:	4b2d      	ldr	r3, [pc, #180]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 020c 	and.w	r2, r3, #12
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	429a      	cmp	r2, r3
 800624e:	d1eb      	bne.n	8006228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006250:	4b27      	ldr	r3, [pc, #156]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d210      	bcs.n	8006280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625e:	4b24      	ldr	r3, [pc, #144]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f023 0207 	bic.w	r2, r3, #7
 8006266:	4922      	ldr	r1, [pc, #136]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626e:	4b20      	ldr	r3, [pc, #128]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d001      	beq.n	8006280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e032      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800628c:	4b19      	ldr	r3, [pc, #100]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4916      	ldr	r1, [pc, #88]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	490e      	ldr	r1, [pc, #56]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062be:	f000 f821 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	490a      	ldr	r1, [pc, #40]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c8>)
 80062d0:	5ccb      	ldrb	r3, [r1, r3]
 80062d2:	fa22 f303 	lsr.w	r3, r2, r3
 80062d6:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <HAL_RCC_ClockConfig+0x1cc>)
 80062d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_RCC_ClockConfig+0x1d0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff f99a 	bl	8005618 <HAL_InitTick>

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40022000 	.word	0x40022000
 80062f4:	40021000 	.word	0x40021000
 80062f8:	0800768c 	.word	0x0800768c
 80062fc:	20000004 	.word	0x20000004
 8006300:	20000008 	.word	0x20000008

08006304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	b490      	push	{r4, r7}
 8006306:	b08a      	sub	sp, #40	@ 0x28
 8006308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800630a:	4b29      	ldr	r3, [pc, #164]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800630c:	1d3c      	adds	r4, r7, #4
 800630e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006314:	f240 2301 	movw	r3, #513	@ 0x201
 8006318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800632e:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b04      	cmp	r3, #4
 800633c:	d002      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0x40>
 800633e:	2b08      	cmp	r3, #8
 8006340:	d003      	beq.n	800634a <HAL_RCC_GetSysClockFreq+0x46>
 8006342:	e02b      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006344:	4b1c      	ldr	r3, [pc, #112]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006346:	623b      	str	r3, [r7, #32]
      break;
 8006348:	e02b      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	0c9b      	lsrs	r3, r3, #18
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	3328      	adds	r3, #40	@ 0x28
 8006354:	443b      	add	r3, r7
 8006356:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800635a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d012      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006366:	4b13      	ldr	r3, [pc, #76]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	0c5b      	lsrs	r3, r3, #17
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	3328      	adds	r3, #40	@ 0x28
 8006372:	443b      	add	r3, r7
 8006374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006378:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4a0e      	ldr	r2, [pc, #56]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800637e:	fb03 f202 	mul.w	r2, r3, r2
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	e004      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	4a0b      	ldr	r2, [pc, #44]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	623b      	str	r3, [r7, #32]
      break;
 800639a:	e002      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b06      	ldr	r3, [pc, #24]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800639e:	623b      	str	r3, [r7, #32]
      break;
 80063a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	@ 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc90      	pop	{r4, r7}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	0800767c 	.word	0x0800767c
 80063b4:	40021000 	.word	0x40021000
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	003d0900 	.word	0x003d0900

080063c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c4:	4b02      	ldr	r3, [pc, #8]	@ (80063d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr
 80063d0:	20000004 	.word	0x20000004

080063d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063d8:	f7ff fff2 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4903      	ldr	r1, [pc, #12]	@ (80063f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40021000 	.word	0x40021000
 80063f8:	0800769c 	.word	0x0800769c

080063fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006400:	f7ff ffde 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 8006404:	4602      	mov	r2, r0
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	0adb      	lsrs	r3, r3, #11
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	4903      	ldr	r1, [pc, #12]	@ (8006420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006412:	5ccb      	ldrb	r3, [r1, r3]
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000
 8006420:	0800769c 	.word	0x0800769c

08006424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <RCC_Delay+0x34>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <RCC_Delay+0x38>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	0a5b      	lsrs	r3, r3, #9
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006440:	bf00      	nop
  }
  while (Delay --);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	60fa      	str	r2, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f9      	bne.n	8006440 <RCC_Delay+0x1c>
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	20000004 	.word	0x20000004
 800645c:	10624dd3 	.word	0x10624dd3

08006460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e03f      	b.n	80064f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fe ff64 	bl	8005354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	@ 0x24
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f905 	bl	80066b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08a      	sub	sp, #40	@ 0x28
 80064fe:	af02      	add	r7, sp, #8
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b20      	cmp	r3, #32
 8006518:	d17c      	bne.n	8006614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit+0x2c>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e075      	b.n	8006616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_UART_Transmit+0x3e>
 8006534:	2302      	movs	r3, #2
 8006536:	e06e      	b.n	8006616 <HAL_UART_Transmit+0x11c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2221      	movs	r2, #33	@ 0x21
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654e:	f7ff f8a5 	bl	800569c <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006568:	d108      	bne.n	800657c <HAL_UART_Transmit+0x82>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e003      	b.n	8006584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800658c:	e02a      	b.n	80065e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	2180      	movs	r1, #128	@ 0x80
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f840 	bl	800661e <UART_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e036      	b.n	8006616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	3302      	adds	r3, #2
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e007      	b.n	80065d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1cf      	bne.n	800658e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2140      	movs	r1, #64	@ 0x40
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f810 	bl	800661e <UART_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e006      	b.n	8006616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	4613      	mov	r3, r2
 800662c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662e:	e02c      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d028      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <UART_WaitOnFlagUntilTimeout+0x30>
 800663e:	f7ff f82d 	bl	800569c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	429a      	cmp	r2, r3
 800664c:	d21d      	bcs.n	800668a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800665c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	bf0c      	ite	eq
 800669a:	2301      	moveq	r3, #1
 800669c:	2300      	movne	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d0c3      	beq.n	8006630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80066ee:	f023 030c 	bic.w	r3, r3, #12
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2c      	ldr	r2, [pc, #176]	@ (80067c8 <UART_SetConfig+0x114>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d103      	bne.n	8006724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800671c:	f7ff fe6e 	bl	80063fc <HAL_RCC_GetPCLK2Freq>
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	e002      	b.n	800672a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006724:	f7ff fe56 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 8006728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009a      	lsls	r2, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	4a22      	ldr	r2, [pc, #136]	@ (80067cc <UART_SetConfig+0x118>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	0119      	lsls	r1, r3, #4
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009a      	lsls	r2, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006760:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <UART_SetConfig+0x118>)
 8006762:	fba3 0302 	umull	r0, r3, r3, r2
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	2064      	movs	r0, #100	@ 0x64
 800676a:	fb00 f303 	mul.w	r3, r0, r3
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	3332      	adds	r3, #50	@ 0x32
 8006774:	4a15      	ldr	r2, [pc, #84]	@ (80067cc <UART_SetConfig+0x118>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006780:	4419      	add	r1, r3
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009a      	lsls	r2, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	fbb2 f2f3 	udiv	r2, r2, r3
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <UART_SetConfig+0x118>)
 800679a:	fba3 0302 	umull	r0, r3, r3, r2
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	2064      	movs	r0, #100	@ 0x64
 80067a2:	fb00 f303 	mul.w	r3, r0, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	3332      	adds	r3, #50	@ 0x32
 80067ac:	4a07      	ldr	r2, [pc, #28]	@ (80067cc <UART_SetConfig+0x118>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	440a      	add	r2, r1
 80067be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40013800 	.word	0x40013800
 80067cc:	51eb851f 	.word	0x51eb851f

080067d0 <std>:
 80067d0:	2300      	movs	r3, #0
 80067d2:	b510      	push	{r4, lr}
 80067d4:	4604      	mov	r4, r0
 80067d6:	e9c0 3300 	strd	r3, r3, [r0]
 80067da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067de:	6083      	str	r3, [r0, #8]
 80067e0:	8181      	strh	r1, [r0, #12]
 80067e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80067e4:	81c2      	strh	r2, [r0, #14]
 80067e6:	6183      	str	r3, [r0, #24]
 80067e8:	4619      	mov	r1, r3
 80067ea:	2208      	movs	r2, #8
 80067ec:	305c      	adds	r0, #92	@ 0x5c
 80067ee:	f000 f906 	bl	80069fe <memset>
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <std+0x58>)
 80067f4:	6224      	str	r4, [r4, #32]
 80067f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80067f8:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <std+0x5c>)
 80067fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006830 <std+0x60>)
 80067fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006800:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <std+0x64>)
 8006802:	6323      	str	r3, [r4, #48]	@ 0x30
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <std+0x68>)
 8006806:	429c      	cmp	r4, r3
 8006808:	d006      	beq.n	8006818 <std+0x48>
 800680a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800680e:	4294      	cmp	r4, r2
 8006810:	d002      	beq.n	8006818 <std+0x48>
 8006812:	33d0      	adds	r3, #208	@ 0xd0
 8006814:	429c      	cmp	r4, r3
 8006816:	d105      	bne.n	8006824 <std+0x54>
 8006818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f000 b966 	b.w	8006af0 <__retarget_lock_init_recursive>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	08006979 	.word	0x08006979
 800682c:	0800699b 	.word	0x0800699b
 8006830:	080069d3 	.word	0x080069d3
 8006834:	080069f7 	.word	0x080069f7
 8006838:	200000d4 	.word	0x200000d4

0800683c <stdio_exit_handler>:
 800683c:	4a02      	ldr	r2, [pc, #8]	@ (8006848 <stdio_exit_handler+0xc>)
 800683e:	4903      	ldr	r1, [pc, #12]	@ (800684c <stdio_exit_handler+0x10>)
 8006840:	4803      	ldr	r0, [pc, #12]	@ (8006850 <stdio_exit_handler+0x14>)
 8006842:	f000 b869 	b.w	8006918 <_fwalk_sglue>
 8006846:	bf00      	nop
 8006848:	20000010 	.word	0x20000010
 800684c:	08007389 	.word	0x08007389
 8006850:	20000020 	.word	0x20000020

08006854 <cleanup_stdio>:
 8006854:	6841      	ldr	r1, [r0, #4]
 8006856:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <cleanup_stdio+0x34>)
 8006858:	b510      	push	{r4, lr}
 800685a:	4299      	cmp	r1, r3
 800685c:	4604      	mov	r4, r0
 800685e:	d001      	beq.n	8006864 <cleanup_stdio+0x10>
 8006860:	f000 fd92 	bl	8007388 <_fflush_r>
 8006864:	68a1      	ldr	r1, [r4, #8]
 8006866:	4b09      	ldr	r3, [pc, #36]	@ (800688c <cleanup_stdio+0x38>)
 8006868:	4299      	cmp	r1, r3
 800686a:	d002      	beq.n	8006872 <cleanup_stdio+0x1e>
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fd8b 	bl	8007388 <_fflush_r>
 8006872:	68e1      	ldr	r1, [r4, #12]
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <cleanup_stdio+0x3c>)
 8006876:	4299      	cmp	r1, r3
 8006878:	d004      	beq.n	8006884 <cleanup_stdio+0x30>
 800687a:	4620      	mov	r0, r4
 800687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006880:	f000 bd82 	b.w	8007388 <_fflush_r>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	bf00      	nop
 8006888:	200000d4 	.word	0x200000d4
 800688c:	2000013c 	.word	0x2000013c
 8006890:	200001a4 	.word	0x200001a4

08006894 <global_stdio_init.part.0>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <global_stdio_init.part.0+0x30>)
 8006898:	4c0b      	ldr	r4, [pc, #44]	@ (80068c8 <global_stdio_init.part.0+0x34>)
 800689a:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <global_stdio_init.part.0+0x38>)
 800689c:	4620      	mov	r0, r4
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	2104      	movs	r1, #4
 80068a2:	2200      	movs	r2, #0
 80068a4:	f7ff ff94 	bl	80067d0 <std>
 80068a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ac:	2201      	movs	r2, #1
 80068ae:	2109      	movs	r1, #9
 80068b0:	f7ff ff8e 	bl	80067d0 <std>
 80068b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068b8:	2202      	movs	r2, #2
 80068ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068be:	2112      	movs	r1, #18
 80068c0:	f7ff bf86 	b.w	80067d0 <std>
 80068c4:	2000020c 	.word	0x2000020c
 80068c8:	200000d4 	.word	0x200000d4
 80068cc:	0800683d 	.word	0x0800683d

080068d0 <__sfp_lock_acquire>:
 80068d0:	4801      	ldr	r0, [pc, #4]	@ (80068d8 <__sfp_lock_acquire+0x8>)
 80068d2:	f000 b90e 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	20000215 	.word	0x20000215

080068dc <__sfp_lock_release>:
 80068dc:	4801      	ldr	r0, [pc, #4]	@ (80068e4 <__sfp_lock_release+0x8>)
 80068de:	f000 b909 	b.w	8006af4 <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	20000215 	.word	0x20000215

080068e8 <__sinit>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4604      	mov	r4, r0
 80068ec:	f7ff fff0 	bl	80068d0 <__sfp_lock_acquire>
 80068f0:	6a23      	ldr	r3, [r4, #32]
 80068f2:	b11b      	cbz	r3, 80068fc <__sinit+0x14>
 80068f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f8:	f7ff bff0 	b.w	80068dc <__sfp_lock_release>
 80068fc:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <__sinit+0x28>)
 80068fe:	6223      	str	r3, [r4, #32]
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <__sinit+0x2c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f5      	bne.n	80068f4 <__sinit+0xc>
 8006908:	f7ff ffc4 	bl	8006894 <global_stdio_init.part.0>
 800690c:	e7f2      	b.n	80068f4 <__sinit+0xc>
 800690e:	bf00      	nop
 8006910:	08006855 	.word	0x08006855
 8006914:	2000020c 	.word	0x2000020c

08006918 <_fwalk_sglue>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4607      	mov	r7, r0
 800691e:	4688      	mov	r8, r1
 8006920:	4614      	mov	r4, r2
 8006922:	2600      	movs	r6, #0
 8006924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006928:	f1b9 0901 	subs.w	r9, r9, #1
 800692c:	d505      	bpl.n	800693a <_fwalk_sglue+0x22>
 800692e:	6824      	ldr	r4, [r4, #0]
 8006930:	2c00      	cmp	r4, #0
 8006932:	d1f7      	bne.n	8006924 <_fwalk_sglue+0xc>
 8006934:	4630      	mov	r0, r6
 8006936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d907      	bls.n	8006950 <_fwalk_sglue+0x38>
 8006940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006944:	3301      	adds	r3, #1
 8006946:	d003      	beq.n	8006950 <_fwalk_sglue+0x38>
 8006948:	4629      	mov	r1, r5
 800694a:	4638      	mov	r0, r7
 800694c:	47c0      	blx	r8
 800694e:	4306      	orrs	r6, r0
 8006950:	3568      	adds	r5, #104	@ 0x68
 8006952:	e7e9      	b.n	8006928 <_fwalk_sglue+0x10>

08006954 <iprintf>:
 8006954:	b40f      	push	{r0, r1, r2, r3}
 8006956:	b507      	push	{r0, r1, r2, lr}
 8006958:	4906      	ldr	r1, [pc, #24]	@ (8006974 <iprintf+0x20>)
 800695a:	ab04      	add	r3, sp, #16
 800695c:	6808      	ldr	r0, [r1, #0]
 800695e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006962:	6881      	ldr	r1, [r0, #8]
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	f000 f9e5 	bl	8006d34 <_vfiprintf_r>
 800696a:	b003      	add	sp, #12
 800696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	2000001c 	.word	0x2000001c

08006978 <__sread>:
 8006978:	b510      	push	{r4, lr}
 800697a:	460c      	mov	r4, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	f000 f868 	bl	8006a54 <_read_r>
 8006984:	2800      	cmp	r0, #0
 8006986:	bfab      	itete	ge
 8006988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800698a:	89a3      	ldrhlt	r3, [r4, #12]
 800698c:	181b      	addge	r3, r3, r0
 800698e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006992:	bfac      	ite	ge
 8006994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006996:	81a3      	strhlt	r3, [r4, #12]
 8006998:	bd10      	pop	{r4, pc}

0800699a <__swrite>:
 800699a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	461f      	mov	r7, r3
 80069a0:	898b      	ldrh	r3, [r1, #12]
 80069a2:	4605      	mov	r5, r0
 80069a4:	05db      	lsls	r3, r3, #23
 80069a6:	460c      	mov	r4, r1
 80069a8:	4616      	mov	r6, r2
 80069aa:	d505      	bpl.n	80069b8 <__swrite+0x1e>
 80069ac:	2302      	movs	r3, #2
 80069ae:	2200      	movs	r2, #0
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	f000 f83c 	bl	8006a30 <_lseek_r>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	4632      	mov	r2, r6
 80069bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	4628      	mov	r0, r5
 80069c4:	463b      	mov	r3, r7
 80069c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	f000 b853 	b.w	8006a78 <_write_r>

080069d2 <__sseek>:
 80069d2:	b510      	push	{r4, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069da:	f000 f829 	bl	8006a30 <_lseek_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	bf15      	itete	ne
 80069e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069ee:	81a3      	strheq	r3, [r4, #12]
 80069f0:	bf18      	it	ne
 80069f2:	81a3      	strhne	r3, [r4, #12]
 80069f4:	bd10      	pop	{r4, pc}

080069f6 <__sclose>:
 80069f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fa:	f000 b809 	b.w	8006a10 <_close_r>

080069fe <memset>:
 80069fe:	4603      	mov	r3, r0
 8006a00:	4402      	add	r2, r0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d100      	bne.n	8006a08 <memset+0xa>
 8006a06:	4770      	bx	lr
 8006a08:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0c:	e7f9      	b.n	8006a02 <memset+0x4>
	...

08006a10 <_close_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4d05      	ldr	r5, [pc, #20]	@ (8006a2c <_close_r+0x1c>)
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fe fd4b 	bl	80054b6 <_close>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_close_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_close_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000210 	.word	0x20000210

08006a30 <_lseek_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4d05      	ldr	r5, [pc, #20]	@ (8006a50 <_lseek_r+0x20>)
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fe fd5d 	bl	80054fe <_lseek>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_lseek_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_lseek_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000210 	.word	0x20000210

08006a54 <_read_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4d05      	ldr	r5, [pc, #20]	@ (8006a74 <_read_r+0x20>)
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fe fcee 	bl	8005444 <_read>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_read_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_read_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000210 	.word	0x20000210

08006a78 <_write_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	2200      	movs	r2, #0
 8006a82:	4d05      	ldr	r5, [pc, #20]	@ (8006a98 <_write_r+0x20>)
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fe fcf9 	bl	800547e <_write>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_write_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_write_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20000210 	.word	0x20000210

08006a9c <__errno>:
 8006a9c:	4b01      	ldr	r3, [pc, #4]	@ (8006aa4 <__errno+0x8>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000001c 	.word	0x2000001c

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	2600      	movs	r6, #0
 8006aac:	4d0c      	ldr	r5, [pc, #48]	@ (8006ae0 <__libc_init_array+0x38>)
 8006aae:	4c0d      	ldr	r4, [pc, #52]	@ (8006ae4 <__libc_init_array+0x3c>)
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	f000 fdc4 	bl	8007644 <_init>
 8006abc:	2600      	movs	r6, #0
 8006abe:	4d0a      	ldr	r5, [pc, #40]	@ (8006ae8 <__libc_init_array+0x40>)
 8006ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8006aec <__libc_init_array+0x44>)
 8006ac2:	1b64      	subs	r4, r4, r5
 8006ac4:	10a4      	asrs	r4, r4, #2
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	080076d8 	.word	0x080076d8
 8006ae4:	080076d8 	.word	0x080076d8
 8006ae8:	080076d8 	.word	0x080076d8
 8006aec:	080076dc 	.word	0x080076dc

08006af0 <__retarget_lock_init_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_acquire_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_release_recursive>:
 8006af4:	4770      	bx	lr
	...

08006af8 <_free_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4605      	mov	r5, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	d040      	beq.n	8006b82 <_free_r+0x8a>
 8006b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b04:	1f0c      	subs	r4, r1, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	18e4      	addlt	r4, r4, r3
 8006b0c:	f000 f8de 	bl	8006ccc <__malloc_lock>
 8006b10:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <_free_r+0x8c>)
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	b933      	cbnz	r3, 8006b24 <_free_r+0x2c>
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	6014      	str	r4, [r2, #0]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b20:	f000 b8da 	b.w	8006cd8 <__malloc_unlock>
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d908      	bls.n	8006b3a <_free_r+0x42>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf01      	itttt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	1809      	addeq	r1, r1, r0
 8006b36:	6021      	streq	r1, [r4, #0]
 8006b38:	e7ed      	b.n	8006b16 <_free_r+0x1e>
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	b10b      	cbz	r3, 8006b44 <_free_r+0x4c>
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d9fa      	bls.n	8006b3a <_free_r+0x42>
 8006b44:	6811      	ldr	r1, [r2, #0]
 8006b46:	1850      	adds	r0, r2, r1
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d10b      	bne.n	8006b64 <_free_r+0x6c>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4401      	add	r1, r0
 8006b50:	1850      	adds	r0, r2, r1
 8006b52:	4283      	cmp	r3, r0
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	d1e0      	bne.n	8006b1a <_free_r+0x22>
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4408      	add	r0, r1
 8006b5e:	6010      	str	r0, [r2, #0]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	e7da      	b.n	8006b1a <_free_r+0x22>
 8006b64:	d902      	bls.n	8006b6c <_free_r+0x74>
 8006b66:	230c      	movs	r3, #12
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	e7d6      	b.n	8006b1a <_free_r+0x22>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	1821      	adds	r1, r4, r0
 8006b70:	428b      	cmp	r3, r1
 8006b72:	bf01      	itttt	eq
 8006b74:	6819      	ldreq	r1, [r3, #0]
 8006b76:	685b      	ldreq	r3, [r3, #4]
 8006b78:	1809      	addeq	r1, r1, r0
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	6054      	str	r4, [r2, #4]
 8006b80:	e7cb      	b.n	8006b1a <_free_r+0x22>
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000021c 	.word	0x2000021c

08006b88 <sbrk_aligned>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8006bc8 <sbrk_aligned+0x40>)
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	6831      	ldr	r1, [r6, #0]
 8006b90:	4605      	mov	r5, r0
 8006b92:	b911      	cbnz	r1, 8006b9a <sbrk_aligned+0x12>
 8006b94:	f000 fcb4 	bl	8007500 <_sbrk_r>
 8006b98:	6030      	str	r0, [r6, #0]
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 fcaf 	bl	8007500 <_sbrk_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d103      	bne.n	8006bae <sbrk_aligned+0x26>
 8006ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8006baa:	4620      	mov	r0, r4
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	1cc4      	adds	r4, r0, #3
 8006bb0:	f024 0403 	bic.w	r4, r4, #3
 8006bb4:	42a0      	cmp	r0, r4
 8006bb6:	d0f8      	beq.n	8006baa <sbrk_aligned+0x22>
 8006bb8:	1a21      	subs	r1, r4, r0
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 fca0 	bl	8007500 <_sbrk_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d1f2      	bne.n	8006baa <sbrk_aligned+0x22>
 8006bc4:	e7ef      	b.n	8006ba6 <sbrk_aligned+0x1e>
 8006bc6:	bf00      	nop
 8006bc8:	20000218 	.word	0x20000218

08006bcc <_malloc_r>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	1ccd      	adds	r5, r1, #3
 8006bd2:	f025 0503 	bic.w	r5, r5, #3
 8006bd6:	3508      	adds	r5, #8
 8006bd8:	2d0c      	cmp	r5, #12
 8006bda:	bf38      	it	cc
 8006bdc:	250c      	movcc	r5, #12
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	4606      	mov	r6, r0
 8006be2:	db01      	blt.n	8006be8 <_malloc_r+0x1c>
 8006be4:	42a9      	cmp	r1, r5
 8006be6:	d904      	bls.n	8006bf2 <_malloc_r+0x26>
 8006be8:	230c      	movs	r3, #12
 8006bea:	6033      	str	r3, [r6, #0]
 8006bec:	2000      	movs	r0, #0
 8006bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cc8 <_malloc_r+0xfc>
 8006bf6:	f000 f869 	bl	8006ccc <__malloc_lock>
 8006bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfe:	461c      	mov	r4, r3
 8006c00:	bb44      	cbnz	r4, 8006c54 <_malloc_r+0x88>
 8006c02:	4629      	mov	r1, r5
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7ff ffbf 	bl	8006b88 <sbrk_aligned>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	d158      	bne.n	8006cc2 <_malloc_r+0xf6>
 8006c10:	f8d8 4000 	ldr.w	r4, [r8]
 8006c14:	4627      	mov	r7, r4
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	d143      	bne.n	8006ca2 <_malloc_r+0xd6>
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	d04b      	beq.n	8006cb6 <_malloc_r+0xea>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	4639      	mov	r1, r7
 8006c22:	4630      	mov	r0, r6
 8006c24:	eb04 0903 	add.w	r9, r4, r3
 8006c28:	f000 fc6a 	bl	8007500 <_sbrk_r>
 8006c2c:	4581      	cmp	r9, r0
 8006c2e:	d142      	bne.n	8006cb6 <_malloc_r+0xea>
 8006c30:	6821      	ldr	r1, [r4, #0]
 8006c32:	4630      	mov	r0, r6
 8006c34:	1a6d      	subs	r5, r5, r1
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7ff ffa6 	bl	8006b88 <sbrk_aligned>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d03a      	beq.n	8006cb6 <_malloc_r+0xea>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	442b      	add	r3, r5
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	f8d8 3000 	ldr.w	r3, [r8]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	bb62      	cbnz	r2, 8006ca8 <_malloc_r+0xdc>
 8006c4e:	f8c8 7000 	str.w	r7, [r8]
 8006c52:	e00f      	b.n	8006c74 <_malloc_r+0xa8>
 8006c54:	6822      	ldr	r2, [r4, #0]
 8006c56:	1b52      	subs	r2, r2, r5
 8006c58:	d420      	bmi.n	8006c9c <_malloc_r+0xd0>
 8006c5a:	2a0b      	cmp	r2, #11
 8006c5c:	d917      	bls.n	8006c8e <_malloc_r+0xc2>
 8006c5e:	1961      	adds	r1, r4, r5
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	6025      	str	r5, [r4, #0]
 8006c64:	bf18      	it	ne
 8006c66:	6059      	strne	r1, [r3, #4]
 8006c68:	6863      	ldr	r3, [r4, #4]
 8006c6a:	bf08      	it	eq
 8006c6c:	f8c8 1000 	streq.w	r1, [r8]
 8006c70:	5162      	str	r2, [r4, r5]
 8006c72:	604b      	str	r3, [r1, #4]
 8006c74:	4630      	mov	r0, r6
 8006c76:	f000 f82f 	bl	8006cd8 <__malloc_unlock>
 8006c7a:	f104 000b 	add.w	r0, r4, #11
 8006c7e:	1d23      	adds	r3, r4, #4
 8006c80:	f020 0007 	bic.w	r0, r0, #7
 8006c84:	1ac2      	subs	r2, r0, r3
 8006c86:	bf1c      	itt	ne
 8006c88:	1a1b      	subne	r3, r3, r0
 8006c8a:	50a3      	strne	r3, [r4, r2]
 8006c8c:	e7af      	b.n	8006bee <_malloc_r+0x22>
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	bf0c      	ite	eq
 8006c94:	f8c8 2000 	streq.w	r2, [r8]
 8006c98:	605a      	strne	r2, [r3, #4]
 8006c9a:	e7eb      	b.n	8006c74 <_malloc_r+0xa8>
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	6864      	ldr	r4, [r4, #4]
 8006ca0:	e7ae      	b.n	8006c00 <_malloc_r+0x34>
 8006ca2:	463c      	mov	r4, r7
 8006ca4:	687f      	ldr	r7, [r7, #4]
 8006ca6:	e7b6      	b.n	8006c16 <_malloc_r+0x4a>
 8006ca8:	461a      	mov	r2, r3
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d1fb      	bne.n	8006ca8 <_malloc_r+0xdc>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6053      	str	r3, [r2, #4]
 8006cb4:	e7de      	b.n	8006c74 <_malloc_r+0xa8>
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	4630      	mov	r0, r6
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f000 f80c 	bl	8006cd8 <__malloc_unlock>
 8006cc0:	e794      	b.n	8006bec <_malloc_r+0x20>
 8006cc2:	6005      	str	r5, [r0, #0]
 8006cc4:	e7d6      	b.n	8006c74 <_malloc_r+0xa8>
 8006cc6:	bf00      	nop
 8006cc8:	2000021c 	.word	0x2000021c

08006ccc <__malloc_lock>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	@ (8006cd4 <__malloc_lock+0x8>)
 8006cce:	f7ff bf10 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000214 	.word	0x20000214

08006cd8 <__malloc_unlock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__malloc_unlock+0x8>)
 8006cda:	f7ff bf0b 	b.w	8006af4 <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20000214 	.word	0x20000214

08006ce4 <__sfputc_r>:
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	b410      	push	{r4}
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	6093      	str	r3, [r2, #8]
 8006cee:	da07      	bge.n	8006d00 <__sfputc_r+0x1c>
 8006cf0:	6994      	ldr	r4, [r2, #24]
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	db01      	blt.n	8006cfa <__sfputc_r+0x16>
 8006cf6:	290a      	cmp	r1, #10
 8006cf8:	d102      	bne.n	8006d00 <__sfputc_r+0x1c>
 8006cfa:	bc10      	pop	{r4}
 8006cfc:	f000 bb6c 	b.w	80073d8 <__swbuf_r>
 8006d00:	6813      	ldr	r3, [r2, #0]
 8006d02:	1c58      	adds	r0, r3, #1
 8006d04:	6010      	str	r0, [r2, #0]
 8006d06:	7019      	strb	r1, [r3, #0]
 8006d08:	4608      	mov	r0, r1
 8006d0a:	bc10      	pop	{r4}
 8006d0c:	4770      	bx	lr

08006d0e <__sfputs_r>:
 8006d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	18d5      	adds	r5, r2, r3
 8006d18:	42ac      	cmp	r4, r5
 8006d1a:	d101      	bne.n	8006d20 <__sfputs_r+0x12>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e007      	b.n	8006d30 <__sfputs_r+0x22>
 8006d20:	463a      	mov	r2, r7
 8006d22:	4630      	mov	r0, r6
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	f7ff ffdc 	bl	8006ce4 <__sfputc_r>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d1f3      	bne.n	8006d18 <__sfputs_r+0xa>
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d34 <_vfiprintf_r>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	4698      	mov	r8, r3
 8006d3e:	4606      	mov	r6, r0
 8006d40:	b09d      	sub	sp, #116	@ 0x74
 8006d42:	b118      	cbz	r0, 8006d4c <_vfiprintf_r+0x18>
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	b90b      	cbnz	r3, 8006d4c <_vfiprintf_r+0x18>
 8006d48:	f7ff fdce 	bl	80068e8 <__sinit>
 8006d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_vfiprintf_r+0x2a>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	059a      	lsls	r2, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_vfiprintf_r+0x2a>
 8006d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d5a:	f7ff feca 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	071b      	lsls	r3, r3, #28
 8006d62:	d501      	bpl.n	8006d68 <_vfiprintf_r+0x34>
 8006d64:	692b      	ldr	r3, [r5, #16]
 8006d66:	b99b      	cbnz	r3, 8006d90 <_vfiprintf_r+0x5c>
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 fb72 	bl	8007454 <__swsetup_r>
 8006d70:	b170      	cbz	r0, 8006d90 <_vfiprintf_r+0x5c>
 8006d72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d74:	07dc      	lsls	r4, r3, #31
 8006d76:	d504      	bpl.n	8006d82 <_vfiprintf_r+0x4e>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b01d      	add	sp, #116	@ 0x74
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	0598      	lsls	r0, r3, #22
 8006d86:	d4f7      	bmi.n	8006d78 <_vfiprintf_r+0x44>
 8006d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d8a:	f7ff feb3 	bl	8006af4 <__retarget_lock_release_recursive>
 8006d8e:	e7f3      	b.n	8006d78 <_vfiprintf_r+0x44>
 8006d90:	2300      	movs	r3, #0
 8006d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d94:	2320      	movs	r3, #32
 8006d96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d9a:	2330      	movs	r3, #48	@ 0x30
 8006d9c:	f04f 0901 	mov.w	r9, #1
 8006da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f50 <_vfiprintf_r+0x21c>
 8006da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dac:	4623      	mov	r3, r4
 8006dae:	469a      	mov	sl, r3
 8006db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db4:	b10a      	cbz	r2, 8006dba <_vfiprintf_r+0x86>
 8006db6:	2a25      	cmp	r2, #37	@ 0x25
 8006db8:	d1f9      	bne.n	8006dae <_vfiprintf_r+0x7a>
 8006dba:	ebba 0b04 	subs.w	fp, sl, r4
 8006dbe:	d00b      	beq.n	8006dd8 <_vfiprintf_r+0xa4>
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ffa1 	bl	8006d0e <__sfputs_r>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f000 80a7 	beq.w	8006f20 <_vfiprintf_r+0x1ec>
 8006dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dd4:	445a      	add	r2, fp
 8006dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 809f 	beq.w	8006f20 <_vfiprintf_r+0x1ec>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295
 8006de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dec:	f10a 0a01 	add.w	sl, sl, #1
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006df8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dfa:	4654      	mov	r4, sl
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e02:	4853      	ldr	r0, [pc, #332]	@ (8006f50 <_vfiprintf_r+0x21c>)
 8006e04:	f000 fb8c 	bl	8007520 <memchr>
 8006e08:	9a04      	ldr	r2, [sp, #16]
 8006e0a:	b9d8      	cbnz	r0, 8006e44 <_vfiprintf_r+0x110>
 8006e0c:	06d1      	lsls	r1, r2, #27
 8006e0e:	bf44      	itt	mi
 8006e10:	2320      	movmi	r3, #32
 8006e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e16:	0713      	lsls	r3, r2, #28
 8006e18:	bf44      	itt	mi
 8006e1a:	232b      	movmi	r3, #43	@ 0x2b
 8006e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e20:	f89a 3000 	ldrb.w	r3, [sl]
 8006e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e26:	d015      	beq.n	8006e54 <_vfiprintf_r+0x120>
 8006e28:	4654      	mov	r4, sl
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f04f 0c0a 	mov.w	ip, #10
 8006e30:	9a07      	ldr	r2, [sp, #28]
 8006e32:	4621      	mov	r1, r4
 8006e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e38:	3b30      	subs	r3, #48	@ 0x30
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d94b      	bls.n	8006ed6 <_vfiprintf_r+0x1a2>
 8006e3e:	b1b0      	cbz	r0, 8006e6e <_vfiprintf_r+0x13a>
 8006e40:	9207      	str	r2, [sp, #28]
 8006e42:	e014      	b.n	8006e6e <_vfiprintf_r+0x13a>
 8006e44:	eba0 0308 	sub.w	r3, r0, r8
 8006e48:	fa09 f303 	lsl.w	r3, r9, r3
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	46a2      	mov	sl, r4
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	e7d2      	b.n	8006dfa <_vfiprintf_r+0xc6>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	1d19      	adds	r1, r3, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bfbb      	ittet	lt
 8006e60:	425b      	neglt	r3, r3
 8006e62:	f042 0202 	orrlt.w	r2, r2, #2
 8006e66:	9307      	strge	r3, [sp, #28]
 8006e68:	9307      	strlt	r3, [sp, #28]
 8006e6a:	bfb8      	it	lt
 8006e6c:	9204      	strlt	r2, [sp, #16]
 8006e6e:	7823      	ldrb	r3, [r4, #0]
 8006e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e72:	d10a      	bne.n	8006e8a <_vfiprintf_r+0x156>
 8006e74:	7863      	ldrb	r3, [r4, #1]
 8006e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e78:	d132      	bne.n	8006ee0 <_vfiprintf_r+0x1ac>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	3402      	adds	r4, #2
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	9203      	str	r2, [sp, #12]
 8006e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e88:	9305      	str	r3, [sp, #20]
 8006e8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f54 <_vfiprintf_r+0x220>
 8006e8e:	2203      	movs	r2, #3
 8006e90:	4650      	mov	r0, sl
 8006e92:	7821      	ldrb	r1, [r4, #0]
 8006e94:	f000 fb44 	bl	8007520 <memchr>
 8006e98:	b138      	cbz	r0, 8006eaa <_vfiprintf_r+0x176>
 8006e9a:	2240      	movs	r2, #64	@ 0x40
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	eba0 000a 	sub.w	r0, r0, sl
 8006ea2:	4082      	lsls	r2, r0
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	3401      	adds	r4, #1
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eae:	2206      	movs	r2, #6
 8006eb0:	4829      	ldr	r0, [pc, #164]	@ (8006f58 <_vfiprintf_r+0x224>)
 8006eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eb6:	f000 fb33 	bl	8007520 <memchr>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d03f      	beq.n	8006f3e <_vfiprintf_r+0x20a>
 8006ebe:	4b27      	ldr	r3, [pc, #156]	@ (8006f5c <_vfiprintf_r+0x228>)
 8006ec0:	bb1b      	cbnz	r3, 8006f0a <_vfiprintf_r+0x1d6>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	3307      	adds	r3, #7
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	3308      	adds	r3, #8
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed0:	443b      	add	r3, r7
 8006ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed4:	e76a      	b.n	8006dac <_vfiprintf_r+0x78>
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	2001      	movs	r0, #1
 8006eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ede:	e7a8      	b.n	8006e32 <_vfiprintf_r+0xfe>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f04f 0c0a 	mov.w	ip, #10
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	3401      	adds	r4, #1
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	4620      	mov	r0, r4
 8006eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef2:	3a30      	subs	r2, #48	@ 0x30
 8006ef4:	2a09      	cmp	r2, #9
 8006ef6:	d903      	bls.n	8006f00 <_vfiprintf_r+0x1cc>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0c6      	beq.n	8006e8a <_vfiprintf_r+0x156>
 8006efc:	9105      	str	r1, [sp, #20]
 8006efe:	e7c4      	b.n	8006e8a <_vfiprintf_r+0x156>
 8006f00:	4604      	mov	r4, r0
 8006f02:	2301      	movs	r3, #1
 8006f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f08:	e7f0      	b.n	8006eec <_vfiprintf_r+0x1b8>
 8006f0a:	ab03      	add	r3, sp, #12
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4630      	mov	r0, r6
 8006f12:	4b13      	ldr	r3, [pc, #76]	@ (8006f60 <_vfiprintf_r+0x22c>)
 8006f14:	a904      	add	r1, sp, #16
 8006f16:	f3af 8000 	nop.w
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	1c78      	adds	r0, r7, #1
 8006f1e:	d1d6      	bne.n	8006ece <_vfiprintf_r+0x19a>
 8006f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f22:	07d9      	lsls	r1, r3, #31
 8006f24:	d405      	bmi.n	8006f32 <_vfiprintf_r+0x1fe>
 8006f26:	89ab      	ldrh	r3, [r5, #12]
 8006f28:	059a      	lsls	r2, r3, #22
 8006f2a:	d402      	bmi.n	8006f32 <_vfiprintf_r+0x1fe>
 8006f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f2e:	f7ff fde1 	bl	8006af4 <__retarget_lock_release_recursive>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	065b      	lsls	r3, r3, #25
 8006f36:	f53f af1f 	bmi.w	8006d78 <_vfiprintf_r+0x44>
 8006f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f3c:	e71e      	b.n	8006d7c <_vfiprintf_r+0x48>
 8006f3e:	ab03      	add	r3, sp, #12
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	462a      	mov	r2, r5
 8006f44:	4630      	mov	r0, r6
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <_vfiprintf_r+0x22c>)
 8006f48:	a904      	add	r1, sp, #16
 8006f4a:	f000 f87d 	bl	8007048 <_printf_i>
 8006f4e:	e7e4      	b.n	8006f1a <_vfiprintf_r+0x1e6>
 8006f50:	080076a4 	.word	0x080076a4
 8006f54:	080076aa 	.word	0x080076aa
 8006f58:	080076ae 	.word	0x080076ae
 8006f5c:	00000000 	.word	0x00000000
 8006f60:	08006d0f 	.word	0x08006d0f

08006f64 <_printf_common>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	4616      	mov	r6, r2
 8006f6a:	4698      	mov	r8, r3
 8006f6c:	688a      	ldr	r2, [r1, #8]
 8006f6e:	690b      	ldr	r3, [r1, #16]
 8006f70:	4607      	mov	r7, r0
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bfb8      	it	lt
 8006f76:	4613      	movlt	r3, r2
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f7e:	460c      	mov	r4, r1
 8006f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f84:	b10a      	cbz	r2, 8006f8a <_printf_common+0x26>
 8006f86:	3301      	adds	r3, #1
 8006f88:	6033      	str	r3, [r6, #0]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	0699      	lsls	r1, r3, #26
 8006f8e:	bf42      	ittt	mi
 8006f90:	6833      	ldrmi	r3, [r6, #0]
 8006f92:	3302      	addmi	r3, #2
 8006f94:	6033      	strmi	r3, [r6, #0]
 8006f96:	6825      	ldr	r5, [r4, #0]
 8006f98:	f015 0506 	ands.w	r5, r5, #6
 8006f9c:	d106      	bne.n	8006fac <_printf_common+0x48>
 8006f9e:	f104 0a19 	add.w	sl, r4, #25
 8006fa2:	68e3      	ldr	r3, [r4, #12]
 8006fa4:	6832      	ldr	r2, [r6, #0]
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	dc2b      	bgt.n	8007004 <_printf_common+0xa0>
 8006fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	3b00      	subs	r3, #0
 8006fb4:	bf18      	it	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	0692      	lsls	r2, r2, #26
 8006fba:	d430      	bmi.n	800701e <_printf_common+0xba>
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fc4:	47c8      	blx	r9
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d023      	beq.n	8007012 <_printf_common+0xae>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	f003 0306 	and.w	r3, r3, #6
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	bf14      	ite	ne
 8006fd6:	2500      	movne	r5, #0
 8006fd8:	6833      	ldreq	r3, [r6, #0]
 8006fda:	f04f 0600 	mov.w	r6, #0
 8006fde:	bf08      	it	eq
 8006fe0:	68e5      	ldreq	r5, [r4, #12]
 8006fe2:	f104 041a 	add.w	r4, r4, #26
 8006fe6:	bf08      	it	eq
 8006fe8:	1aed      	subeq	r5, r5, r3
 8006fea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fee:	bf08      	it	eq
 8006ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	bfc4      	itt	gt
 8006ff8:	1a9b      	subgt	r3, r3, r2
 8006ffa:	18ed      	addgt	r5, r5, r3
 8006ffc:	42b5      	cmp	r5, r6
 8006ffe:	d11a      	bne.n	8007036 <_printf_common+0xd2>
 8007000:	2000      	movs	r0, #0
 8007002:	e008      	b.n	8007016 <_printf_common+0xb2>
 8007004:	2301      	movs	r3, #1
 8007006:	4652      	mov	r2, sl
 8007008:	4641      	mov	r1, r8
 800700a:	4638      	mov	r0, r7
 800700c:	47c8      	blx	r9
 800700e:	3001      	adds	r0, #1
 8007010:	d103      	bne.n	800701a <_printf_common+0xb6>
 8007012:	f04f 30ff 	mov.w	r0, #4294967295
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	3501      	adds	r5, #1
 800701c:	e7c1      	b.n	8006fa2 <_printf_common+0x3e>
 800701e:	2030      	movs	r0, #48	@ 0x30
 8007020:	18e1      	adds	r1, r4, r3
 8007022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800702c:	4422      	add	r2, r4
 800702e:	3302      	adds	r3, #2
 8007030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007034:	e7c2      	b.n	8006fbc <_printf_common+0x58>
 8007036:	2301      	movs	r3, #1
 8007038:	4622      	mov	r2, r4
 800703a:	4641      	mov	r1, r8
 800703c:	4638      	mov	r0, r7
 800703e:	47c8      	blx	r9
 8007040:	3001      	adds	r0, #1
 8007042:	d0e6      	beq.n	8007012 <_printf_common+0xae>
 8007044:	3601      	adds	r6, #1
 8007046:	e7d9      	b.n	8006ffc <_printf_common+0x98>

08007048 <_printf_i>:
 8007048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	7e0f      	ldrb	r7, [r1, #24]
 800704e:	4691      	mov	r9, r2
 8007050:	2f78      	cmp	r7, #120	@ 0x78
 8007052:	4680      	mov	r8, r0
 8007054:	460c      	mov	r4, r1
 8007056:	469a      	mov	sl, r3
 8007058:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800705a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800705e:	d807      	bhi.n	8007070 <_printf_i+0x28>
 8007060:	2f62      	cmp	r7, #98	@ 0x62
 8007062:	d80a      	bhi.n	800707a <_printf_i+0x32>
 8007064:	2f00      	cmp	r7, #0
 8007066:	f000 80d3 	beq.w	8007210 <_printf_i+0x1c8>
 800706a:	2f58      	cmp	r7, #88	@ 0x58
 800706c:	f000 80ba 	beq.w	80071e4 <_printf_i+0x19c>
 8007070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007078:	e03a      	b.n	80070f0 <_printf_i+0xa8>
 800707a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800707e:	2b15      	cmp	r3, #21
 8007080:	d8f6      	bhi.n	8007070 <_printf_i+0x28>
 8007082:	a101      	add	r1, pc, #4	@ (adr r1, 8007088 <_printf_i+0x40>)
 8007084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007088:	080070e1 	.word	0x080070e1
 800708c:	080070f5 	.word	0x080070f5
 8007090:	08007071 	.word	0x08007071
 8007094:	08007071 	.word	0x08007071
 8007098:	08007071 	.word	0x08007071
 800709c:	08007071 	.word	0x08007071
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	08007071 	.word	0x08007071
 80070a8:	08007071 	.word	0x08007071
 80070ac:	08007071 	.word	0x08007071
 80070b0:	08007071 	.word	0x08007071
 80070b4:	080071f7 	.word	0x080071f7
 80070b8:	0800711f 	.word	0x0800711f
 80070bc:	080071b1 	.word	0x080071b1
 80070c0:	08007071 	.word	0x08007071
 80070c4:	08007071 	.word	0x08007071
 80070c8:	08007219 	.word	0x08007219
 80070cc:	08007071 	.word	0x08007071
 80070d0:	0800711f 	.word	0x0800711f
 80070d4:	08007071 	.word	0x08007071
 80070d8:	08007071 	.word	0x08007071
 80070dc:	080071b9 	.word	0x080071b9
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6032      	str	r2, [r6, #0]
 80070e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f0:	2301      	movs	r3, #1
 80070f2:	e09e      	b.n	8007232 <_printf_i+0x1ea>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	1d19      	adds	r1, r3, #4
 80070fa:	6031      	str	r1, [r6, #0]
 80070fc:	0606      	lsls	r6, r0, #24
 80070fe:	d501      	bpl.n	8007104 <_printf_i+0xbc>
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	e003      	b.n	800710c <_printf_i+0xc4>
 8007104:	0645      	lsls	r5, r0, #25
 8007106:	d5fb      	bpl.n	8007100 <_printf_i+0xb8>
 8007108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800710c:	2d00      	cmp	r5, #0
 800710e:	da03      	bge.n	8007118 <_printf_i+0xd0>
 8007110:	232d      	movs	r3, #45	@ 0x2d
 8007112:	426d      	negs	r5, r5
 8007114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007118:	230a      	movs	r3, #10
 800711a:	4859      	ldr	r0, [pc, #356]	@ (8007280 <_printf_i+0x238>)
 800711c:	e011      	b.n	8007142 <_printf_i+0xfa>
 800711e:	6821      	ldr	r1, [r4, #0]
 8007120:	6833      	ldr	r3, [r6, #0]
 8007122:	0608      	lsls	r0, r1, #24
 8007124:	f853 5b04 	ldr.w	r5, [r3], #4
 8007128:	d402      	bmi.n	8007130 <_printf_i+0xe8>
 800712a:	0649      	lsls	r1, r1, #25
 800712c:	bf48      	it	mi
 800712e:	b2ad      	uxthmi	r5, r5
 8007130:	2f6f      	cmp	r7, #111	@ 0x6f
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	bf14      	ite	ne
 8007136:	230a      	movne	r3, #10
 8007138:	2308      	moveq	r3, #8
 800713a:	4851      	ldr	r0, [pc, #324]	@ (8007280 <_printf_i+0x238>)
 800713c:	2100      	movs	r1, #0
 800713e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007142:	6866      	ldr	r6, [r4, #4]
 8007144:	2e00      	cmp	r6, #0
 8007146:	bfa8      	it	ge
 8007148:	6821      	ldrge	r1, [r4, #0]
 800714a:	60a6      	str	r6, [r4, #8]
 800714c:	bfa4      	itt	ge
 800714e:	f021 0104 	bicge.w	r1, r1, #4
 8007152:	6021      	strge	r1, [r4, #0]
 8007154:	b90d      	cbnz	r5, 800715a <_printf_i+0x112>
 8007156:	2e00      	cmp	r6, #0
 8007158:	d04b      	beq.n	80071f2 <_printf_i+0x1aa>
 800715a:	4616      	mov	r6, r2
 800715c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007160:	fb03 5711 	mls	r7, r3, r1, r5
 8007164:	5dc7      	ldrb	r7, [r0, r7]
 8007166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716a:	462f      	mov	r7, r5
 800716c:	42bb      	cmp	r3, r7
 800716e:	460d      	mov	r5, r1
 8007170:	d9f4      	bls.n	800715c <_printf_i+0x114>
 8007172:	2b08      	cmp	r3, #8
 8007174:	d10b      	bne.n	800718e <_printf_i+0x146>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	07df      	lsls	r7, r3, #31
 800717a:	d508      	bpl.n	800718e <_printf_i+0x146>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	6861      	ldr	r1, [r4, #4]
 8007180:	4299      	cmp	r1, r3
 8007182:	bfde      	ittt	le
 8007184:	2330      	movle	r3, #48	@ 0x30
 8007186:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800718e:	1b92      	subs	r2, r2, r6
 8007190:	6122      	str	r2, [r4, #16]
 8007192:	464b      	mov	r3, r9
 8007194:	4621      	mov	r1, r4
 8007196:	4640      	mov	r0, r8
 8007198:	f8cd a000 	str.w	sl, [sp]
 800719c:	aa03      	add	r2, sp, #12
 800719e:	f7ff fee1 	bl	8006f64 <_printf_common>
 80071a2:	3001      	adds	r0, #1
 80071a4:	d14a      	bne.n	800723c <_printf_i+0x1f4>
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	b004      	add	sp, #16
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f043 0320 	orr.w	r3, r3, #32
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	2778      	movs	r7, #120	@ 0x78
 80071ba:	4832      	ldr	r0, [pc, #200]	@ (8007284 <_printf_i+0x23c>)
 80071bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	6831      	ldr	r1, [r6, #0]
 80071c4:	061f      	lsls	r7, r3, #24
 80071c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ca:	d402      	bmi.n	80071d2 <_printf_i+0x18a>
 80071cc:	065f      	lsls	r7, r3, #25
 80071ce:	bf48      	it	mi
 80071d0:	b2ad      	uxthmi	r5, r5
 80071d2:	6031      	str	r1, [r6, #0]
 80071d4:	07d9      	lsls	r1, r3, #31
 80071d6:	bf44      	itt	mi
 80071d8:	f043 0320 	orrmi.w	r3, r3, #32
 80071dc:	6023      	strmi	r3, [r4, #0]
 80071de:	b11d      	cbz	r5, 80071e8 <_printf_i+0x1a0>
 80071e0:	2310      	movs	r3, #16
 80071e2:	e7ab      	b.n	800713c <_printf_i+0xf4>
 80071e4:	4826      	ldr	r0, [pc, #152]	@ (8007280 <_printf_i+0x238>)
 80071e6:	e7e9      	b.n	80071bc <_printf_i+0x174>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f023 0320 	bic.w	r3, r3, #32
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	e7f6      	b.n	80071e0 <_printf_i+0x198>
 80071f2:	4616      	mov	r6, r2
 80071f4:	e7bd      	b.n	8007172 <_printf_i+0x12a>
 80071f6:	6833      	ldr	r3, [r6, #0]
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1d18      	adds	r0, r3, #4
 80071fc:	6961      	ldr	r1, [r4, #20]
 80071fe:	6030      	str	r0, [r6, #0]
 8007200:	062e      	lsls	r6, r5, #24
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	d501      	bpl.n	800720a <_printf_i+0x1c2>
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	e002      	b.n	8007210 <_printf_i+0x1c8>
 800720a:	0668      	lsls	r0, r5, #25
 800720c:	d5fb      	bpl.n	8007206 <_printf_i+0x1be>
 800720e:	8019      	strh	r1, [r3, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	4616      	mov	r6, r2
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	e7bc      	b.n	8007192 <_printf_i+0x14a>
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	2100      	movs	r1, #0
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	6032      	str	r2, [r6, #0]
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f97b 	bl	8007520 <memchr>
 800722a:	b108      	cbz	r0, 8007230 <_printf_i+0x1e8>
 800722c:	1b80      	subs	r0, r0, r6
 800722e:	6060      	str	r0, [r4, #4]
 8007230:	6863      	ldr	r3, [r4, #4]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2300      	movs	r3, #0
 8007236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723a:	e7aa      	b.n	8007192 <_printf_i+0x14a>
 800723c:	4632      	mov	r2, r6
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	6923      	ldr	r3, [r4, #16]
 8007244:	47d0      	blx	sl
 8007246:	3001      	adds	r0, #1
 8007248:	d0ad      	beq.n	80071a6 <_printf_i+0x15e>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	079b      	lsls	r3, r3, #30
 800724e:	d413      	bmi.n	8007278 <_printf_i+0x230>
 8007250:	68e0      	ldr	r0, [r4, #12]
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	4298      	cmp	r0, r3
 8007256:	bfb8      	it	lt
 8007258:	4618      	movlt	r0, r3
 800725a:	e7a6      	b.n	80071aa <_printf_i+0x162>
 800725c:	2301      	movs	r3, #1
 800725e:	4632      	mov	r2, r6
 8007260:	4649      	mov	r1, r9
 8007262:	4640      	mov	r0, r8
 8007264:	47d0      	blx	sl
 8007266:	3001      	adds	r0, #1
 8007268:	d09d      	beq.n	80071a6 <_printf_i+0x15e>
 800726a:	3501      	adds	r5, #1
 800726c:	68e3      	ldr	r3, [r4, #12]
 800726e:	9903      	ldr	r1, [sp, #12]
 8007270:	1a5b      	subs	r3, r3, r1
 8007272:	42ab      	cmp	r3, r5
 8007274:	dcf2      	bgt.n	800725c <_printf_i+0x214>
 8007276:	e7eb      	b.n	8007250 <_printf_i+0x208>
 8007278:	2500      	movs	r5, #0
 800727a:	f104 0619 	add.w	r6, r4, #25
 800727e:	e7f5      	b.n	800726c <_printf_i+0x224>
 8007280:	080076b5 	.word	0x080076b5
 8007284:	080076c6 	.word	0x080076c6

08007288 <__sflush_r>:
 8007288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	0716      	lsls	r6, r2, #28
 8007290:	4605      	mov	r5, r0
 8007292:	460c      	mov	r4, r1
 8007294:	d454      	bmi.n	8007340 <__sflush_r+0xb8>
 8007296:	684b      	ldr	r3, [r1, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc02      	bgt.n	80072a2 <__sflush_r+0x1a>
 800729c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dd48      	ble.n	8007334 <__sflush_r+0xac>
 80072a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	d045      	beq.n	8007334 <__sflush_r+0xac>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072ae:	682f      	ldr	r7, [r5, #0]
 80072b0:	6a21      	ldr	r1, [r4, #32]
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	d030      	beq.n	8007318 <__sflush_r+0x90>
 80072b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	0759      	lsls	r1, r3, #29
 80072bc:	d505      	bpl.n	80072ca <__sflush_r+0x42>
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	1ad2      	subs	r2, r2, r3
 80072c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072c4:	b10b      	cbz	r3, 80072ca <__sflush_r+0x42>
 80072c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d0:	6a21      	ldr	r1, [r4, #32]
 80072d2:	47b0      	blx	r6
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	d106      	bne.n	80072e8 <__sflush_r+0x60>
 80072da:	6829      	ldr	r1, [r5, #0]
 80072dc:	291d      	cmp	r1, #29
 80072de:	d82b      	bhi.n	8007338 <__sflush_r+0xb0>
 80072e0:	4a28      	ldr	r2, [pc, #160]	@ (8007384 <__sflush_r+0xfc>)
 80072e2:	410a      	asrs	r2, r1
 80072e4:	07d6      	lsls	r6, r2, #31
 80072e6:	d427      	bmi.n	8007338 <__sflush_r+0xb0>
 80072e8:	2200      	movs	r2, #0
 80072ea:	6062      	str	r2, [r4, #4]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	04d9      	lsls	r1, r3, #19
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	d504      	bpl.n	80072fe <__sflush_r+0x76>
 80072f4:	1c42      	adds	r2, r0, #1
 80072f6:	d101      	bne.n	80072fc <__sflush_r+0x74>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b903      	cbnz	r3, 80072fe <__sflush_r+0x76>
 80072fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80072fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007300:	602f      	str	r7, [r5, #0]
 8007302:	b1b9      	cbz	r1, 8007334 <__sflush_r+0xac>
 8007304:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <__sflush_r+0x8a>
 800730c:	4628      	mov	r0, r5
 800730e:	f7ff fbf3 	bl	8006af8 <_free_r>
 8007312:	2300      	movs	r3, #0
 8007314:	6363      	str	r3, [r4, #52]	@ 0x34
 8007316:	e00d      	b.n	8007334 <__sflush_r+0xac>
 8007318:	2301      	movs	r3, #1
 800731a:	4628      	mov	r0, r5
 800731c:	47b0      	blx	r6
 800731e:	4602      	mov	r2, r0
 8007320:	1c50      	adds	r0, r2, #1
 8007322:	d1c9      	bne.n	80072b8 <__sflush_r+0x30>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0c6      	beq.n	80072b8 <__sflush_r+0x30>
 800732a:	2b1d      	cmp	r3, #29
 800732c:	d001      	beq.n	8007332 <__sflush_r+0xaa>
 800732e:	2b16      	cmp	r3, #22
 8007330:	d11d      	bne.n	800736e <__sflush_r+0xe6>
 8007332:	602f      	str	r7, [r5, #0]
 8007334:	2000      	movs	r0, #0
 8007336:	e021      	b.n	800737c <__sflush_r+0xf4>
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	b21b      	sxth	r3, r3
 800733e:	e01a      	b.n	8007376 <__sflush_r+0xee>
 8007340:	690f      	ldr	r7, [r1, #16]
 8007342:	2f00      	cmp	r7, #0
 8007344:	d0f6      	beq.n	8007334 <__sflush_r+0xac>
 8007346:	0793      	lsls	r3, r2, #30
 8007348:	bf18      	it	ne
 800734a:	2300      	movne	r3, #0
 800734c:	680e      	ldr	r6, [r1, #0]
 800734e:	bf08      	it	eq
 8007350:	694b      	ldreq	r3, [r1, #20]
 8007352:	1bf6      	subs	r6, r6, r7
 8007354:	600f      	str	r7, [r1, #0]
 8007356:	608b      	str	r3, [r1, #8]
 8007358:	2e00      	cmp	r6, #0
 800735a:	ddeb      	ble.n	8007334 <__sflush_r+0xac>
 800735c:	4633      	mov	r3, r6
 800735e:	463a      	mov	r2, r7
 8007360:	4628      	mov	r0, r5
 8007362:	6a21      	ldr	r1, [r4, #32]
 8007364:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007368:	47e0      	blx	ip
 800736a:	2800      	cmp	r0, #0
 800736c:	dc07      	bgt.n	800737e <__sflush_r+0xf6>
 800736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007376:	f04f 30ff 	mov.w	r0, #4294967295
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737e:	4407      	add	r7, r0
 8007380:	1a36      	subs	r6, r6, r0
 8007382:	e7e9      	b.n	8007358 <__sflush_r+0xd0>
 8007384:	dfbffffe 	.word	0xdfbffffe

08007388 <_fflush_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	690b      	ldr	r3, [r1, #16]
 800738c:	4605      	mov	r5, r0
 800738e:	460c      	mov	r4, r1
 8007390:	b913      	cbnz	r3, 8007398 <_fflush_r+0x10>
 8007392:	2500      	movs	r5, #0
 8007394:	4628      	mov	r0, r5
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	b118      	cbz	r0, 80073a2 <_fflush_r+0x1a>
 800739a:	6a03      	ldr	r3, [r0, #32]
 800739c:	b90b      	cbnz	r3, 80073a2 <_fflush_r+0x1a>
 800739e:	f7ff faa3 	bl	80068e8 <__sinit>
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f3      	beq.n	8007392 <_fflush_r+0xa>
 80073aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d404      	bmi.n	80073ba <_fflush_r+0x32>
 80073b0:	0599      	lsls	r1, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_fflush_r+0x32>
 80073b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073b6:	f7ff fb9c 	bl	8006af2 <__retarget_lock_acquire_recursive>
 80073ba:	4628      	mov	r0, r5
 80073bc:	4621      	mov	r1, r4
 80073be:	f7ff ff63 	bl	8007288 <__sflush_r>
 80073c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073c4:	4605      	mov	r5, r0
 80073c6:	07da      	lsls	r2, r3, #31
 80073c8:	d4e4      	bmi.n	8007394 <_fflush_r+0xc>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	059b      	lsls	r3, r3, #22
 80073ce:	d4e1      	bmi.n	8007394 <_fflush_r+0xc>
 80073d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073d2:	f7ff fb8f 	bl	8006af4 <__retarget_lock_release_recursive>
 80073d6:	e7dd      	b.n	8007394 <_fflush_r+0xc>

080073d8 <__swbuf_r>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	460e      	mov	r6, r1
 80073dc:	4614      	mov	r4, r2
 80073de:	4605      	mov	r5, r0
 80073e0:	b118      	cbz	r0, 80073ea <__swbuf_r+0x12>
 80073e2:	6a03      	ldr	r3, [r0, #32]
 80073e4:	b90b      	cbnz	r3, 80073ea <__swbuf_r+0x12>
 80073e6:	f7ff fa7f 	bl	80068e8 <__sinit>
 80073ea:	69a3      	ldr	r3, [r4, #24]
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	071a      	lsls	r2, r3, #28
 80073f2:	d501      	bpl.n	80073f8 <__swbuf_r+0x20>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b943      	cbnz	r3, 800740a <__swbuf_r+0x32>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	f000 f82a 	bl	8007454 <__swsetup_r>
 8007400:	b118      	cbz	r0, 800740a <__swbuf_r+0x32>
 8007402:	f04f 37ff 	mov.w	r7, #4294967295
 8007406:	4638      	mov	r0, r7
 8007408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	6922      	ldr	r2, [r4, #16]
 800740e:	b2f6      	uxtb	r6, r6
 8007410:	1a98      	subs	r0, r3, r2
 8007412:	6963      	ldr	r3, [r4, #20]
 8007414:	4637      	mov	r7, r6
 8007416:	4283      	cmp	r3, r0
 8007418:	dc05      	bgt.n	8007426 <__swbuf_r+0x4e>
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f7ff ffb3 	bl	8007388 <_fflush_r>
 8007422:	2800      	cmp	r0, #0
 8007424:	d1ed      	bne.n	8007402 <__swbuf_r+0x2a>
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	60a3      	str	r3, [r4, #8]
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	701e      	strb	r6, [r3, #0]
 8007434:	6962      	ldr	r2, [r4, #20]
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	429a      	cmp	r2, r3
 800743a:	d004      	beq.n	8007446 <__swbuf_r+0x6e>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	07db      	lsls	r3, r3, #31
 8007440:	d5e1      	bpl.n	8007406 <__swbuf_r+0x2e>
 8007442:	2e0a      	cmp	r6, #10
 8007444:	d1df      	bne.n	8007406 <__swbuf_r+0x2e>
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f7ff ff9d 	bl	8007388 <_fflush_r>
 800744e:	2800      	cmp	r0, #0
 8007450:	d0d9      	beq.n	8007406 <__swbuf_r+0x2e>
 8007452:	e7d6      	b.n	8007402 <__swbuf_r+0x2a>

08007454 <__swsetup_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4b29      	ldr	r3, [pc, #164]	@ (80074fc <__swsetup_r+0xa8>)
 8007458:	4605      	mov	r5, r0
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	460c      	mov	r4, r1
 800745e:	b118      	cbz	r0, 8007468 <__swsetup_r+0x14>
 8007460:	6a03      	ldr	r3, [r0, #32]
 8007462:	b90b      	cbnz	r3, 8007468 <__swsetup_r+0x14>
 8007464:	f7ff fa40 	bl	80068e8 <__sinit>
 8007468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746c:	0719      	lsls	r1, r3, #28
 800746e:	d422      	bmi.n	80074b6 <__swsetup_r+0x62>
 8007470:	06da      	lsls	r2, r3, #27
 8007472:	d407      	bmi.n	8007484 <__swsetup_r+0x30>
 8007474:	2209      	movs	r2, #9
 8007476:	602a      	str	r2, [r5, #0]
 8007478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	e033      	b.n	80074ec <__swsetup_r+0x98>
 8007484:	0758      	lsls	r0, r3, #29
 8007486:	d512      	bpl.n	80074ae <__swsetup_r+0x5a>
 8007488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800748a:	b141      	cbz	r1, 800749e <__swsetup_r+0x4a>
 800748c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007490:	4299      	cmp	r1, r3
 8007492:	d002      	beq.n	800749a <__swsetup_r+0x46>
 8007494:	4628      	mov	r0, r5
 8007496:	f7ff fb2f 	bl	8006af8 <_free_r>
 800749a:	2300      	movs	r3, #0
 800749c:	6363      	str	r3, [r4, #52]	@ 0x34
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	2300      	movs	r3, #0
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f043 0308 	orr.w	r3, r3, #8
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	b94b      	cbnz	r3, 80074ce <__swsetup_r+0x7a>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c4:	d003      	beq.n	80074ce <__swsetup_r+0x7a>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 f85c 	bl	8007586 <__smakebuf_r>
 80074ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d2:	f013 0201 	ands.w	r2, r3, #1
 80074d6:	d00a      	beq.n	80074ee <__swsetup_r+0x9a>
 80074d8:	2200      	movs	r2, #0
 80074da:	60a2      	str	r2, [r4, #8]
 80074dc:	6962      	ldr	r2, [r4, #20]
 80074de:	4252      	negs	r2, r2
 80074e0:	61a2      	str	r2, [r4, #24]
 80074e2:	6922      	ldr	r2, [r4, #16]
 80074e4:	b942      	cbnz	r2, 80074f8 <__swsetup_r+0xa4>
 80074e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074ea:	d1c5      	bne.n	8007478 <__swsetup_r+0x24>
 80074ec:	bd38      	pop	{r3, r4, r5, pc}
 80074ee:	0799      	lsls	r1, r3, #30
 80074f0:	bf58      	it	pl
 80074f2:	6962      	ldrpl	r2, [r4, #20]
 80074f4:	60a2      	str	r2, [r4, #8]
 80074f6:	e7f4      	b.n	80074e2 <__swsetup_r+0x8e>
 80074f8:	2000      	movs	r0, #0
 80074fa:	e7f7      	b.n	80074ec <__swsetup_r+0x98>
 80074fc:	2000001c 	.word	0x2000001c

08007500 <_sbrk_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	2300      	movs	r3, #0
 8007504:	4d05      	ldr	r5, [pc, #20]	@ (800751c <_sbrk_r+0x1c>)
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	f7fe f804 	bl	8005518 <_sbrk>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_sbrk_r+0x1a>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_sbrk_r+0x1a>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20000210 	.word	0x20000210

08007520 <memchr>:
 8007520:	4603      	mov	r3, r0
 8007522:	b510      	push	{r4, lr}
 8007524:	b2c9      	uxtb	r1, r1
 8007526:	4402      	add	r2, r0
 8007528:	4293      	cmp	r3, r2
 800752a:	4618      	mov	r0, r3
 800752c:	d101      	bne.n	8007532 <memchr+0x12>
 800752e:	2000      	movs	r0, #0
 8007530:	e003      	b.n	800753a <memchr+0x1a>
 8007532:	7804      	ldrb	r4, [r0, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	428c      	cmp	r4, r1
 8007538:	d1f6      	bne.n	8007528 <memchr+0x8>
 800753a:	bd10      	pop	{r4, pc}

0800753c <__swhatbuf_r>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	4615      	mov	r5, r2
 8007546:	2900      	cmp	r1, #0
 8007548:	461e      	mov	r6, r3
 800754a:	b096      	sub	sp, #88	@ 0x58
 800754c:	da0c      	bge.n	8007568 <__swhatbuf_r+0x2c>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	2100      	movs	r1, #0
 8007552:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007556:	bf14      	ite	ne
 8007558:	2340      	movne	r3, #64	@ 0x40
 800755a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800755e:	2000      	movs	r0, #0
 8007560:	6031      	str	r1, [r6, #0]
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	b016      	add	sp, #88	@ 0x58
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	466a      	mov	r2, sp
 800756a:	f000 f849 	bl	8007600 <_fstat_r>
 800756e:	2800      	cmp	r0, #0
 8007570:	dbed      	blt.n	800754e <__swhatbuf_r+0x12>
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007578:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800757c:	4259      	negs	r1, r3
 800757e:	4159      	adcs	r1, r3
 8007580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007584:	e7eb      	b.n	800755e <__swhatbuf_r+0x22>

08007586 <__smakebuf_r>:
 8007586:	898b      	ldrh	r3, [r1, #12]
 8007588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758a:	079d      	lsls	r5, r3, #30
 800758c:	4606      	mov	r6, r0
 800758e:	460c      	mov	r4, r1
 8007590:	d507      	bpl.n	80075a2 <__smakebuf_r+0x1c>
 8007592:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	2301      	movs	r3, #1
 800759c:	6163      	str	r3, [r4, #20]
 800759e:	b003      	add	sp, #12
 80075a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a2:	466a      	mov	r2, sp
 80075a4:	ab01      	add	r3, sp, #4
 80075a6:	f7ff ffc9 	bl	800753c <__swhatbuf_r>
 80075aa:	9f00      	ldr	r7, [sp, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	4639      	mov	r1, r7
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7ff fb0b 	bl	8006bcc <_malloc_r>
 80075b6:	b948      	cbnz	r0, 80075cc <__smakebuf_r+0x46>
 80075b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075bc:	059a      	lsls	r2, r3, #22
 80075be:	d4ee      	bmi.n	800759e <__smakebuf_r+0x18>
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	e7e2      	b.n	8007592 <__smakebuf_r+0xc>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	9b01      	ldr	r3, [sp, #4]
 80075da:	6020      	str	r0, [r4, #0]
 80075dc:	b15b      	cbz	r3, 80075f6 <__smakebuf_r+0x70>
 80075de:	4630      	mov	r0, r6
 80075e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e4:	f000 f81e 	bl	8007624 <_isatty_r>
 80075e8:	b128      	cbz	r0, 80075f6 <__smakebuf_r+0x70>
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	431d      	orrs	r5, r3
 80075fa:	81a5      	strh	r5, [r4, #12]
 80075fc:	e7cf      	b.n	800759e <__smakebuf_r+0x18>
	...

08007600 <_fstat_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	2300      	movs	r3, #0
 8007604:	4d06      	ldr	r5, [pc, #24]	@ (8007620 <_fstat_r+0x20>)
 8007606:	4604      	mov	r4, r0
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	f7fd ff5d 	bl	80054cc <_fstat>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d102      	bne.n	800761c <_fstat_r+0x1c>
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	b103      	cbz	r3, 800761c <_fstat_r+0x1c>
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	20000210 	.word	0x20000210

08007624 <_isatty_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	2300      	movs	r3, #0
 8007628:	4d05      	ldr	r5, [pc, #20]	@ (8007640 <_isatty_r+0x1c>)
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	f7fd ff5b 	bl	80054ea <_isatty>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_isatty_r+0x1a>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_isatty_r+0x1a>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000210 	.word	0x20000210

08007644 <_init>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr

08007650 <_fini>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr
